{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"@0x/utils\");\n/**\r\n * A altered version of the base class Subprovider found in [web3-provider-engine](https://github.com/MetaMask/provider-engine).\r\n * This one has an async/await `emitPayloadAsync` and also defined types.\r\n */\n\n\nvar Subprovider =\n/** @class */\nfunction () {\n  function Subprovider() {}\n\n  Subprovider._createFinalPayload = function (payload) {\n    var finalPayload = __assign({\n      // defaults\n      id: Subprovider._getRandomId(),\n      jsonrpc: '2.0',\n      params: []\n    }, payload);\n\n    return finalPayload;\n  }; // Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js\n\n\n  Subprovider._getRandomId = function () {\n    var extraDigits = 3;\n    var baseTen = 10; // 13 time digits\n\n    var datePart = new Date().getTime() * Math.pow(baseTen, extraDigits); // 3 random digits\n\n    var extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits)); // 16 digits\n\n    return datePart + extraPart;\n  };\n  /**\r\n   * Emits a JSON RPC payload that will then be handled by the ProviderEngine instance\r\n   * this subprovider is a part of. The payload will cascade down the subprovider middleware\r\n   * stack until finding the responsible entity for handling the request.\r\n   * @param payload JSON RPC payload\r\n   * @returns JSON RPC response payload\r\n   */\n\n\n  Subprovider.prototype.emitPayloadAsync = function (payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var finalPayload, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            finalPayload = Subprovider._createFinalPayload(payload);\n            return [4\n            /*yield*/\n            , utils_1.promisify(this.engine.sendAsync, this.engine)(finalPayload)];\n\n          case 1:\n            response = _a.sent();\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\r\n   * Set's the subprovider's engine to the ProviderEngine it is added to.\r\n   * This is only called within the ProviderEngine source code, do not call\r\n   * directly.\r\n   * @param engine The ProviderEngine this subprovider is added to\r\n   */\n\n\n  Subprovider.prototype.setEngine = function (engine) {\n    this.engine = engine;\n  };\n\n  return Subprovider;\n}();\n\nexports.Subprovider = Subprovider;","map":{"version":3,"sources":["../../../src/subproviders/subprovider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAKA;;;AAGG;;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA,CA6DC;;AA1DoB,EAAA,WAAA,CAAA,mBAAA,GAAjB,UACI,OADJ,EACqD;AAEjD,QAAM,YAAY,GAAA,QAAA,CAAA;AACd;AACA,MAAA,EAAE,EAAE,WAAW,CAAC,YAAZ,EAFU;AAGd,MAAA,OAAO,EAAE,KAHK;AAId,MAAA,MAAM,EAAE;AAJM,KAAA,EAKX,OALW,CAAlB;;AAOA,WAAO,YAAP;AACH,GAXgB,CAHrB,CAeI;;;AACe,EAAA,WAAA,CAAA,YAAA,GAAf,YAAA;AACI,QAAM,WAAW,GAAG,CAApB;AACA,QAAM,OAAO,GAAG,EAAhB,CAFJ,CAGI;;AACA,QAAM,QAAQ,GAAG,IAAI,IAAJ,GAAW,OAAX,KAAuB,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,WAAlB,CAAxC,CAJJ,CAKI;;AACA,QAAM,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,WAAlB,CAA3B,CAAlB,CANJ,CAOI;;AACA,WAAO,QAAQ,GAAG,SAAlB;AACH,GATc;AAsBf;;;;;;AAMG;;;AACU,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAb,UAA8B,OAA9B,EAA+E;;;;;;AACrE,YAAA,YAAY,GAAG,WAAW,CAAC,mBAAZ,CAAgC,OAAhC,CAAf;AAGW,mBAAA,CAAA;AAAA;AAAA,cAAM,OAAA,CAAA,SAAA,CAAkC,KAAK,MAAL,CAAY,SAA9C,EAAyD,KAAK,MAA9D,EAAsE,YAAtE,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,QAAP,CAAA;;;;AACH,GANY;AAOb;;;;;AAKG;;;AACI,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAA2C;AACvC,SAAK,MAAL,GAAc,MAAd;AACH,GAFM;;AAGX,SAAA,WAAA;AAAC,CA7DD,EAAA;;AAAsB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar utils_1 = require(\"@0x/utils\");\r\n/**\r\n * A altered version of the base class Subprovider found in [web3-provider-engine](https://github.com/MetaMask/provider-engine).\r\n * This one has an async/await `emitPayloadAsync` and also defined types.\r\n */\r\nvar Subprovider = /** @class */ (function () {\r\n    function Subprovider() {\r\n    }\r\n    Subprovider._createFinalPayload = function (payload) {\r\n        var finalPayload = __assign({ \r\n            // defaults\r\n            id: Subprovider._getRandomId(), jsonrpc: '2.0', params: [] }, payload);\r\n        return finalPayload;\r\n    };\r\n    // Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js\r\n    Subprovider._getRandomId = function () {\r\n        var extraDigits = 3;\r\n        var baseTen = 10;\r\n        // 13 time digits\r\n        var datePart = new Date().getTime() * Math.pow(baseTen, extraDigits);\r\n        // 3 random digits\r\n        var extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits));\r\n        // 16 digits\r\n        return datePart + extraPart;\r\n    };\r\n    /**\r\n     * Emits a JSON RPC payload that will then be handled by the ProviderEngine instance\r\n     * this subprovider is a part of. The payload will cascade down the subprovider middleware\r\n     * stack until finding the responsible entity for handling the request.\r\n     * @param payload JSON RPC payload\r\n     * @returns JSON RPC response payload\r\n     */\r\n    Subprovider.prototype.emitPayloadAsync = function (payload) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var finalPayload, response;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        finalPayload = Subprovider._createFinalPayload(payload);\r\n                        return [4 /*yield*/, utils_1.promisify(this.engine.sendAsync, this.engine)(finalPayload)];\r\n                    case 1:\r\n                        response = _a.sent();\r\n                        return [2 /*return*/, response];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Set's the subprovider's engine to the ProviderEngine it is added to.\r\n     * This is only called within the ProviderEngine source code, do not call\r\n     * directly.\r\n     * @param engine The ProviderEngine this subprovider is added to\r\n     */\r\n    Subprovider.prototype.setEngine = function (engine) {\r\n        this.engine = engine;\r\n    };\r\n    return Subprovider;\r\n}());\r\nexports.Subprovider = Subprovider;\r\n//# sourceMappingURL=subprovider.js.map"]},"metadata":{},"sourceType":"script"}