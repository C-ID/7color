{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar jsSHA3 = require(\"js-sha3\");\n\nvar _ = require(\"lodash\");\n\nvar random_1 = require(\"./random\");\n\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nvar ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n  isChecksumAddress: function (address) {\n    // Check each case\n    var unprefixedAddress = address.replace('0x', '');\n    var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n\n    for (var i = 0; i < ADDRESS_LENGTH; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      var hexBase = 16;\n      var lowercaseRange = 7;\n\n      if (parseInt(addressHash[i], hexBase) > lowercaseRange && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i] || parseInt(addressHash[i], hexBase) <= lowercaseRange && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  isAddress: function (address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  },\n  padZeros: function (address) {\n    return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n  },\n  generatePseudoRandomAddress: function () {\n    var randomBigNum = random_1.generatePseudoRandom256BitNumber();\n    var randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\n    var addressLengthInBytes = 20;\n    var randomAddress = \"0x\" + randomBuff.slice(0, addressLengthInBytes).toString('hex');\n    return randomAddress;\n  }\n};","map":{"version":3,"sources":["../../src/address_utils.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAM,mBAAmB,GAAG,sBAA5B;AACA,IAAM,uBAAuB,GAAG,oCAAhC;AACA,IAAM,cAAc,GAAG,EAAvB;AAEa,OAAA,CAAA,YAAA,GAAe;AACxB,EAAA,iBAAiB,EAAjB,UAAkB,OAAlB,EAAiC;AAC7B;AACA,QAAM,iBAAiB,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAA1B;AACA,QAAM,WAAW,GAAG,MAAM,CAAC,SAAP,CAAiB,iBAAiB,CAAC,WAAlB,EAAjB,CAApB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;AACrC;AACA,UAAM,OAAO,GAAG,EAAhB;AACA,UAAM,cAAc,GAAG,CAAvB;;AACA,UACK,QAAQ,CAAC,WAAW,CAAC,CAAD,CAAZ,EAAiB,OAAjB,CAAR,GAAoC,cAApC,IACG,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,WAArB,OAAuC,iBAAiB,CAAC,CAAD,CAD5D,IAEC,QAAQ,CAAC,WAAW,CAAC,CAAD,CAAZ,EAAiB,OAAjB,CAAR,IAAqC,cAArC,IACG,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,WAArB,OAAuC,iBAAiB,CAAC,CAAD,CAJhE,EAKE;AACE,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GApBuB;AAqBxB,EAAA,SAAS,EAAT,UAAU,OAAV,EAAyB;AACrB,QAAI,CAAC,mBAAmB,CAAC,IAApB,CAAyB,OAAzB,CAAL,EAAwC;AACpC;AACA,aAAO,KAAP;AACH,KAHD,MAGO,IAAI,uBAAuB,CAAC,IAAxB,CAA6B,OAA7B,CAAJ,EAA2C;AAC9C;AACA,aAAO,IAAP;AACH,KAHM,MAGA;AACH;AACA,UAAM,yBAAyB,GAAG,OAAA,CAAA,YAAA,CAAa,iBAAb,CAA+B,OAA/B,CAAlC;AACA,aAAO,yBAAP;AACH;AACJ,GAjCuB;AAkCxB,EAAA,QAAQ,EAAR,UAAS,OAAT,EAAwB;AACpB,WAAO,iBAAA,CAAA,YAAA,CAAa,CAAC,CAAC,QAAF,CAAW,iBAAA,CAAA,cAAA,CAAe,OAAf,CAAX,EAAoC,cAApC,EAAoD,GAApD,CAAb,CAAP;AACH,GApCuB;AAqCxB,EAAA,2BAA2B,EAA3B,YAAA;AACI,QAAM,YAAY,GAAG,QAAA,CAAA,gCAAA,EAArB;AACA,QAAM,UAAU,GAAG,iBAAA,CAAA,IAAA,CAAK,YAAY,CAAC,QAAb,EAAL,CAAnB;AACA,QAAM,oBAAoB,GAAG,EAA7B;AACA,QAAM,aAAa,GAAG,OAAK,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,oBAApB,EAA0C,QAA1C,CAAmD,KAAnD,CAA3B;AACA,WAAO,aAAP;AACH;AA3CuB,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\r\nvar jsSHA3 = require(\"js-sha3\");\r\nvar _ = require(\"lodash\");\r\nvar random_1 = require(\"./random\");\r\nvar BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\r\nvar SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\r\nvar ADDRESS_LENGTH = 40;\r\nexports.addressUtils = {\r\n    isChecksumAddress: function (address) {\r\n        // Check each case\r\n        var unprefixedAddress = address.replace('0x', '');\r\n        var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\r\n        for (var i = 0; i < ADDRESS_LENGTH; i++) {\r\n            // The nth letter should be uppercase if the nth digit of casemap is 1\r\n            var hexBase = 16;\r\n            var lowercaseRange = 7;\r\n            if ((parseInt(addressHash[i], hexBase) > lowercaseRange &&\r\n                unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i]) ||\r\n                (parseInt(addressHash[i], hexBase) <= lowercaseRange &&\r\n                    unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    isAddress: function (address) {\r\n        if (!BASIC_ADDRESS_REGEX.test(address)) {\r\n            // Check if it has the basic requirements of an address\r\n            return false;\r\n        }\r\n        else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\r\n            // If it's all small caps or all all caps, return true\r\n            return true;\r\n        }\r\n        else {\r\n            // Otherwise check each case\r\n            var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\r\n            return isValidChecksummedAddress;\r\n        }\r\n    },\r\n    padZeros: function (address) {\r\n        return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\r\n    },\r\n    generatePseudoRandomAddress: function () {\r\n        var randomBigNum = random_1.generatePseudoRandom256BitNumber();\r\n        var randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\r\n        var addressLengthInBytes = 20;\r\n        var randomAddress = \"0x\" + randomBuff.slice(0, addressLengthInBytes).toString('hex');\r\n        return randomAddress;\r\n    },\r\n};\r\n//# sourceMappingURL=address_utils.js.map"]},"metadata":{},"sourceType":"script"}