{"ast":null,"code":"/* istanbul ignore next */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['punycode', './idna-map'], function (punycode, idna_map) {\n      return factory(punycode, idna_map);\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('punycode'), require('./idna-map'));\n  } else {\n    root.uts46 = factory(root.punycode, root.idna_map);\n  }\n})(this, function (punycode, idna_map) {\n  function mapLabel(label, useStd3ASCII, transitional) {\n    var mapped = [];\n\n    for (var ch of label) {\n      var cp = ch.codePointAt(0);\n      var composite = idna_map.mapChar(cp);\n      var flags = composite >> 23;\n      var kind = composite >> 21 & 3;\n      var index = composite >> 5 & 0xffff;\n      var length = composite & 0x1f;\n      var value = idna_map.mapStr.substr(index, length);\n\n      if (kind == 0 || useStd3ASCII && flags & 1) {\n        throw new Error(\"Illegal char \" + ch);\n      } else if (kind == 1) {\n        mapped.push(value);\n      } else if (kind == 2) {\n        mapped.push(transitional ? value : ch);\n      } else if (kind == 3) {\n        mapped.push(ch);\n      }\n    }\n\n    var newLabel = mapped.join(\"\").normalize(\"NFC\");\n    return newLabel;\n  }\n\n  function process(domain, transitional, useStd3ASCII) {\n    if (useStd3ASCII === undefined) useStd3ASCII = false;\n    var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional); // Step 3. Break\n\n    var labels = mappedIDNA.split(\".\"); // Step 4. Convert/Validate\n\n    labels = labels.map(function (label) {\n      if (label.startsWith(\"xn--\")) {\n        label = punycode.decode(label.substring(4));\n        validateLabel(label, useStd3ASCII, false);\n      } else {\n        validateLabel(label, useStd3ASCII, transitional);\n      }\n\n      return label;\n    });\n    return labels.join(\".\");\n  }\n\n  function validateLabel(label, useStd3ASCII, transitional) {\n    // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the\n    // third position and fourth positions.\n    if (label[2] == '-' && label[3] == '-') throw new Error(\"Failed to validate \" + label); // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS\n    // character.\n\n    if (label.startsWith('-') || label.endsWith('-')) throw new Error(\"Failed to validate \" + label); // 4. The label must not contain a U+002E ( . ) FULL STOP.\n\n    if (label.includes('.')) throw new Error(\"Failed to validate \" + label);\n    if (mapLabel(label, useStd3ASCII, transitional) != label) throw new Error(\"Failed to validate \" + label); // 5. The label must not begin with a combining mark, that is:\n    // General_Category=Mark.\n\n    var ch = label.codePointAt(0);\n    if (idna_map.mapChar(ch) & 0x2 << 23) throw new Error(\"Label contains illegal character: \" + ch);\n  }\n\n  function toAscii(domain, options) {\n    if (options === undefined) options = {};\n    var transitional = 'transitional' in options ? options.transitional : true;\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;\n    var labels = process(domain, transitional, useStd3ASCII).split('.');\n    var asciiLabels = labels.map(punycode.toASCII);\n    var asciiString = asciiLabels.join('.');\n\n    if (verifyDnsLength) {\n      if (asciiString.length < 1 || asciiString.length > 253) {\n        throw new Error(\"DNS name has wrong length: \" + asciiString);\n      }\n\n      for (var label of asciiLabels) {\n        if (label.length < 1 || label.length > 63) throw new Error(\"DNS label has wrong length: \" + label);\n      }\n    }\n\n    return asciiString;\n  }\n\n  function toUnicode(domain, options) {\n    if (options === undefined) options = {};\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    return process(domain, false, useStd3ASCII);\n  }\n\n  return {\n    toUnicode: toUnicode,\n    toAscii: toAscii\n  };\n});","map":{"version":3,"sources":["F:/7color/node_modules/idna-uts46/uts46.js"],"names":["root","factory","define","amd","punycode","idna_map","exports","module","require","uts46","mapLabel","label","useStd3ASCII","transitional","mapped","ch","cp","codePointAt","composite","mapChar","flags","kind","index","length","value","mapStr","substr","Error","push","newLabel","join","normalize","process","domain","undefined","mappedIDNA","labels","split","map","startsWith","decode","substring","validateLabel","endsWith","includes","toAscii","options","verifyDnsLength","asciiLabels","toASCII","asciiString","toUnicode"],"mappings":"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","sourcesContent":["/* istanbul ignore next */\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(['punycode', './idna-map'], function (punycode, idna_map) {\r\n      return factory(punycode, idna_map);\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(require('punycode'), require('./idna-map'));\r\n  } else {\r\n    root.uts46 = factory(root.punycode, root.idna_map);\r\n  }\r\n}(this, function (punycode, idna_map) {\r\n\r\nfunction mapLabel(label, useStd3ASCII, transitional) {\r\n  var mapped = [];\r\n  for (var ch of label) {\r\n    var cp = ch.codePointAt(0);\r\n    var composite = idna_map.mapChar(cp);\r\n    var flags = (composite >> 23);\r\n    var kind = (composite >> 21) & 3;\r\n    var index = (composite >> 5) & 0xffff;\r\n    var length = composite & 0x1f;\r\n    var value = idna_map.mapStr.substr(index, length);\r\n    if (kind == 0 || (useStd3ASCII && (flags & 1))) {\r\n      throw new Error(\"Illegal char \" + ch);\r\n    } else if (kind == 1) {\r\n      mapped.push(value);\r\n    } else if (kind == 2) {\r\n      mapped.push(transitional ? value : ch);\r\n    } else if (kind == 3) {\r\n      mapped.push(ch);\r\n    }\r\n  }\r\n\r\n  var newLabel = mapped.join(\"\").normalize(\"NFC\");\r\n  return newLabel;\r\n}\r\n\r\nfunction process(domain, transitional, useStd3ASCII) {\r\n  if (useStd3ASCII === undefined)\r\n      useStd3ASCII = false;\r\n  var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);\r\n\r\n  // Step 3. Break\r\n  var labels = mappedIDNA.split(\".\");\r\n\r\n  // Step 4. Convert/Validate\r\n  labels = labels.map(function (label) {\r\n    if (label.startsWith(\"xn--\")) {\r\n      label = punycode.decode(label.substring(4));\r\n      validateLabel(label, useStd3ASCII, false);\r\n    } else {\r\n      validateLabel(label, useStd3ASCII, transitional);\r\n    }\r\n    return label;\r\n  });\r\n\r\n  return labels.join(\".\");\r\n}\r\n\r\nfunction validateLabel(label, useStd3ASCII, transitional) {\r\n  // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the\r\n  // third position and fourth positions.\r\n  if (label[2] == '-' && label[3] == '-')\r\n    throw new Error(\"Failed to validate \" + label);\r\n\r\n  // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS\r\n  // character.\r\n  if (label.startsWith('-') || label.endsWith('-'))\r\n    throw new Error(\"Failed to validate \" + label);\r\n\r\n  // 4. The label must not contain a U+002E ( . ) FULL STOP.\r\n  if (label.includes('.'))\r\n    throw new Error(\"Failed to validate \" + label);\r\n\r\n  if (mapLabel(label, useStd3ASCII, transitional) != label)\r\n    throw new Error(\"Failed to validate \" + label);\r\n\r\n  // 5. The label must not begin with a combining mark, that is:\r\n  // General_Category=Mark.\r\n  var ch = label.codePointAt(0);\r\n  if (idna_map.mapChar(ch) & (0x2 << 23))\r\n    throw new Error(\"Label contains illegal character: \" + ch);\r\n}\r\n\r\nfunction toAscii(domain, options) {\r\n  if (options === undefined)\r\n    options = { };\r\n  var transitional = 'transitional' in options ? options.transitional : true;\r\n  var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\r\n  var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;\r\n  var labels = process(domain, transitional, useStd3ASCII).split('.');\r\n  var asciiLabels = labels.map(punycode.toASCII);\r\n  var asciiString = asciiLabels.join('.');\r\n  if (verifyDnsLength) {\r\n    if (asciiString.length < 1 || asciiString.length > 253) {\r\n      throw new Error(\"DNS name has wrong length: \" + asciiString);\r\n    }\r\n    for (var label of asciiLabels) {\r\n      if (label.length < 1 || label.length > 63)\r\n        throw new Error(\"DNS label has wrong length: \" + label);\r\n    }\r\n  }\r\n  return asciiString;\r\n}\r\n\r\nfunction toUnicode(domain, options) {\r\n  if (options === undefined)\r\n    options = { };\r\n  var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\r\n  return process(domain, false, useStd3ASCII);\r\n}\r\n\r\nreturn {\r\n  toUnicode: toUnicode,\r\n  toAscii: toAscii,\r\n};\r\n}));\r\n"]},"metadata":{},"sourceType":"script"}