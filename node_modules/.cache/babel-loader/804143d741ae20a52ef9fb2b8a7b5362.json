{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst env_1 = require(\"./lib/env\");\n\nconst secp256k1_1 = require(\"./lib/secp256k1\");\n\nconst elliptic_1 = require(\"./lib/elliptic\");\n\nconst constants_1 = require(\"./constants\");\n\nconst helpers_1 = require(\"./helpers\");\n\nfunction generatePrivate() {\n  return env_1.isNode() ? secp256k1_1.secp256k1GeneratePrivate() : elliptic_1.ellipticGeneratePrivate();\n}\n\nexports.generatePrivate = generatePrivate;\n\nfunction checkPrivateKey(privateKey) {\n  helpers_1.assert(privateKey.length === constants_1.KEY_LENGTH, constants_1.ERROR_BAD_PRIVATE_KEY);\n  helpers_1.assert(helpers_1.isValidPrivateKey(privateKey), constants_1.ERROR_BAD_PRIVATE_KEY);\n}\n\nexports.checkPrivateKey = checkPrivateKey;\n\nfunction checkPublicKey(publicKey) {\n  helpers_1.assert(publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH || publicKey.length === constants_1.PREFIXED_KEY_LENGTH, constants_1.ERROR_BAD_PUBLIC_KEY);\n\n  if (publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH) {\n    helpers_1.assert(publicKey[0] === 4, constants_1.ERROR_BAD_PUBLIC_KEY);\n  }\n\n  if (publicKey.length === constants_1.PREFIXED_KEY_LENGTH) {\n    helpers_1.assert(publicKey[0] === 2 || publicKey[0] === 3, constants_1.ERROR_BAD_PUBLIC_KEY);\n  }\n}\n\nexports.checkPublicKey = checkPublicKey;\n\nfunction checkMessage(msg) {\n  helpers_1.assert(msg.length > 0, constants_1.ERROR_EMPTY_MESSAGE);\n  helpers_1.assert(msg.length <= constants_1.MAX_MSG_LENGTH, constants_1.ERROR_MESSAGE_TOO_LONG);\n}\n\nexports.checkMessage = checkMessage;\n\nfunction compress(publicKey) {\n  if (helpers_1.isCompressed(publicKey)) {\n    return publicKey;\n  }\n\n  return env_1.isNode() ? secp256k1_1.secp256k1Compress(publicKey) : elliptic_1.ellipticCompress(publicKey);\n}\n\nexports.compress = compress;\n\nfunction decompress(publicKey) {\n  if (helpers_1.isDecompressed(publicKey)) {\n    return publicKey;\n  }\n\n  return env_1.isNode() ? secp256k1_1.secp256k1Decompress(publicKey) : elliptic_1.ellipticDecompress(publicKey);\n}\n\nexports.decompress = decompress;\n\nfunction getPublic(privateKey) {\n  checkPrivateKey(privateKey);\n  return env_1.isNode() ? secp256k1_1.secp256k1GetPublic(privateKey) : elliptic_1.ellipticGetPublic(privateKey);\n}\n\nexports.getPublic = getPublic;\n\nfunction getPublicCompressed(privateKey) {\n  checkPrivateKey(privateKey);\n  return env_1.isNode() ? secp256k1_1.secp256k1GetPublicCompressed(privateKey) : elliptic_1.ellipticGetPublicCompressed(privateKey);\n}\n\nexports.getPublicCompressed = getPublicCompressed;\n\nfunction generateKeyPair() {\n  const privateKey = generatePrivate();\n  const publicKey = getPublic(privateKey);\n  return {\n    privateKey,\n    publicKey\n  };\n}\n\nexports.generateKeyPair = generateKeyPair;\n\nfunction signatureExport(sig) {\n  return env_1.isNode() ? secp256k1_1.secp256k1SignatureExport(sig) : elliptic_1.ellipticSignatureExport(sig);\n}\n\nexports.signatureExport = signatureExport;\n\nfunction sign(privateKey, msg, rsvSig = false) {\n  checkPrivateKey(privateKey);\n  checkMessage(msg);\n  return env_1.isNode() ? secp256k1_1.secp256k1Sign(msg, privateKey, rsvSig) : elliptic_1.ellipticSign(msg, privateKey, rsvSig);\n}\n\nexports.sign = sign;\n\nfunction recover(msg, sig, compressed = false) {\n  checkMessage(msg);\n  return env_1.isNode() ? secp256k1_1.secp256k1Recover(sig, msg, compressed) : elliptic_1.ellipticRecover(sig, msg, compressed);\n}\n\nexports.recover = recover;\n\nfunction verify(publicKey, msg, sig) {\n  checkPublicKey(publicKey);\n  checkMessage(msg);\n  const sigGood = env_1.isNode() ? secp256k1_1.secp256k1Verify(sig, msg, publicKey) : elliptic_1.ellipticVerify(sig, msg, publicKey);\n\n  if (sigGood) {\n    return null;\n  } else {\n    throw new Error('Bad signature');\n  }\n}\n\nexports.verify = verify;","map":{"version":3,"sources":["../../src/ecdsa.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst env_1 = require(\"./lib/env\");\r\nconst secp256k1_1 = require(\"./lib/secp256k1\");\r\nconst elliptic_1 = require(\"./lib/elliptic\");\r\nconst constants_1 = require(\"./constants\");\r\nconst helpers_1 = require(\"./helpers\");\r\nfunction generatePrivate() {\r\n    return env_1.isNode() ? secp256k1_1.secp256k1GeneratePrivate() : elliptic_1.ellipticGeneratePrivate();\r\n}\r\nexports.generatePrivate = generatePrivate;\r\nfunction checkPrivateKey(privateKey) {\r\n    helpers_1.assert(privateKey.length === constants_1.KEY_LENGTH, constants_1.ERROR_BAD_PRIVATE_KEY);\r\n    helpers_1.assert(helpers_1.isValidPrivateKey(privateKey), constants_1.ERROR_BAD_PRIVATE_KEY);\r\n}\r\nexports.checkPrivateKey = checkPrivateKey;\r\nfunction checkPublicKey(publicKey) {\r\n    helpers_1.assert(publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH ||\r\n        publicKey.length === constants_1.PREFIXED_KEY_LENGTH, constants_1.ERROR_BAD_PUBLIC_KEY);\r\n    if (publicKey.length === constants_1.PREFIXED_DECOMPRESSED_LENGTH) {\r\n        helpers_1.assert(publicKey[0] === 4, constants_1.ERROR_BAD_PUBLIC_KEY);\r\n    }\r\n    if (publicKey.length === constants_1.PREFIXED_KEY_LENGTH) {\r\n        helpers_1.assert(publicKey[0] === 2 || publicKey[0] === 3, constants_1.ERROR_BAD_PUBLIC_KEY);\r\n    }\r\n}\r\nexports.checkPublicKey = checkPublicKey;\r\nfunction checkMessage(msg) {\r\n    helpers_1.assert(msg.length > 0, constants_1.ERROR_EMPTY_MESSAGE);\r\n    helpers_1.assert(msg.length <= constants_1.MAX_MSG_LENGTH, constants_1.ERROR_MESSAGE_TOO_LONG);\r\n}\r\nexports.checkMessage = checkMessage;\r\nfunction compress(publicKey) {\r\n    if (helpers_1.isCompressed(publicKey)) {\r\n        return publicKey;\r\n    }\r\n    return env_1.isNode() ? secp256k1_1.secp256k1Compress(publicKey) : elliptic_1.ellipticCompress(publicKey);\r\n}\r\nexports.compress = compress;\r\nfunction decompress(publicKey) {\r\n    if (helpers_1.isDecompressed(publicKey)) {\r\n        return publicKey;\r\n    }\r\n    return env_1.isNode()\r\n        ? secp256k1_1.secp256k1Decompress(publicKey)\r\n        : elliptic_1.ellipticDecompress(publicKey);\r\n}\r\nexports.decompress = decompress;\r\nfunction getPublic(privateKey) {\r\n    checkPrivateKey(privateKey);\r\n    return env_1.isNode()\r\n        ? secp256k1_1.secp256k1GetPublic(privateKey)\r\n        : elliptic_1.ellipticGetPublic(privateKey);\r\n}\r\nexports.getPublic = getPublic;\r\nfunction getPublicCompressed(privateKey) {\r\n    checkPrivateKey(privateKey);\r\n    return env_1.isNode()\r\n        ? secp256k1_1.secp256k1GetPublicCompressed(privateKey)\r\n        : elliptic_1.ellipticGetPublicCompressed(privateKey);\r\n}\r\nexports.getPublicCompressed = getPublicCompressed;\r\nfunction generateKeyPair() {\r\n    const privateKey = generatePrivate();\r\n    const publicKey = getPublic(privateKey);\r\n    return { privateKey, publicKey };\r\n}\r\nexports.generateKeyPair = generateKeyPair;\r\nfunction signatureExport(sig) {\r\n    return env_1.isNode()\r\n        ? secp256k1_1.secp256k1SignatureExport(sig)\r\n        : elliptic_1.ellipticSignatureExport(sig);\r\n}\r\nexports.signatureExport = signatureExport;\r\nfunction sign(privateKey, msg, rsvSig = false) {\r\n    checkPrivateKey(privateKey);\r\n    checkMessage(msg);\r\n    return env_1.isNode()\r\n        ? secp256k1_1.secp256k1Sign(msg, privateKey, rsvSig)\r\n        : elliptic_1.ellipticSign(msg, privateKey, rsvSig);\r\n}\r\nexports.sign = sign;\r\nfunction recover(msg, sig, compressed = false) {\r\n    checkMessage(msg);\r\n    return env_1.isNode()\r\n        ? secp256k1_1.secp256k1Recover(sig, msg, compressed)\r\n        : elliptic_1.ellipticRecover(sig, msg, compressed);\r\n}\r\nexports.recover = recover;\r\nfunction verify(publicKey, msg, sig) {\r\n    checkPublicKey(publicKey);\r\n    checkMessage(msg);\r\n    const sigGood = env_1.isNode()\r\n        ? secp256k1_1.secp256k1Verify(sig, msg, publicKey)\r\n        : elliptic_1.ellipticVerify(sig, msg, publicKey);\r\n    if (sigGood) {\r\n        return null;\r\n    }\r\n    else {\r\n        throw new Error('Bad signature');\r\n    }\r\n}\r\nexports.verify = verify;\r\n//# sourceMappingURL=ecdsa.js.map"]},"metadata":{},"sourceType":"script"}