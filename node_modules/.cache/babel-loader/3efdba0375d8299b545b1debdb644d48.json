{"ast":null,"code":"const safeStringify = require('fast-safe-stringify');\n/**\r\n * @class JsonRpcError\r\n * Error subclass implementing JSON RPC 2.0 errors.\r\n * Permits any integer error code.\r\n */\n\n\nclass JsonRpcError extends Error {\n  /**\r\n   * Create a JSON RPC error.\r\n   * @param {number} code - The integer error code.\r\n   * @param {string} message - The string message.\r\n   * @param {any} [data] - The error data.\r\n   */\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) throw new Error('\"code\" must be an integer.');\n    if (!message || typeof message !== 'string') throw new Error('\"message\" must be a nonempty string.');\n    super(message);\n    this.code = code;\n    if (data !== undefined) this.data = data;\n  }\n  /**\r\n   * Returns a plain object with all public class properties.\r\n   * @returns {object} The serialized error. \r\n   */\n\n\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n    if (this.data !== undefined) serialized.data = this.data;\n    if (this.stack) serialized.stack = this.stack;\n    return serialized;\n  }\n  /**\r\n   * Return a string representation of the serialized error, omitting\r\n   * any circular references.\r\n   * @returns {string} The serialized error as a string.\r\n   */\n\n\n  toString() {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n\n}\n/**\r\n * @class EthJsonRpcError\r\n * Error subclass implementing Ethereum JSON RPC errors.\r\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\r\n */\n\n\nclass EthJsonRpcError extends JsonRpcError {\n  /**\r\n   * Create an Ethereum JSON RPC error.\r\n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\r\n   * @param {string} message - The string message.\r\n   * @param {any} [data] - The error data.\r\n   */\n  constructor(code, message, data) {\n    if (!isValidEthCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n\n    super(code, message, data);\n  }\n\n} // Internal\n\n\nfunction isValidEthCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return;\n  }\n\n  return value;\n} // Exports\n\n\nmodule.exports = {\n  JsonRpcError,\n  EthJsonRpcError\n};","map":{"version":3,"sources":["F:/7color/node_modules/eth-json-rpc-errors/src/classes.js"],"names":["safeStringify","require","JsonRpcError","Error","constructor","code","message","data","Number","isInteger","undefined","serialize","serialized","stack","toString","stringifyReplacer","EthJsonRpcError","isValidEthCode","_","value","module","exports"],"mappings":"AACA,MAAMA,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,YAAN,SAA2BC,KAA3B,CAAiC;AAE/B;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,OAAR,EAAiBC,IAAjB,EAAuB;AAEhC,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,CAAL,EAA6B,MAAM,IAAIF,KAAJ,CACjC,4BADiC,CAAN;AAG7B,QAAI,CAACG,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C,MAAM,IAAIH,KAAJ,CACjD,sCADiD,CAAN;AAI7C,UAAMG,OAAN;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,QAAIE,IAAI,KAAKG,SAAb,EAAwB,KAAKH,IAAL,GAAYA,IAAZ;AACzB;AAED;AACF;AACA;AACA;;;AACEI,EAAAA,SAAS,GAAG;AACV,UAAMC,UAAU,GAAG;AACjBP,MAAAA,IAAI,EAAE,KAAKA,IADM;AAEjBC,MAAAA,OAAO,EAAE,KAAKA;AAFG,KAAnB;AAIA,QAAI,KAAKC,IAAL,KAAcG,SAAlB,EAA6BE,UAAU,CAACL,IAAX,GAAkB,KAAKA,IAAvB;AAC7B,QAAI,KAAKM,KAAT,EAAgBD,UAAU,CAACC,KAAX,GAAmB,KAAKA,KAAxB;AAChB,WAAOD,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,QAAQ,GAAG;AACT,WAAOd,aAAa,CAClB,KAAKW,SAAL,EADkB,EAElBI,iBAFkB,EAGlB,CAHkB,CAApB;AAKD;;AA/C8B;AAkDjC;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAN,SAA8Bd,YAA9B,CAA2C;AACzC;AACF;AACA;AACA;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAsB;AAC/B,QAAI,CAACU,cAAc,CAACZ,IAAD,CAAnB,EAA2B;AACzB,YAAM,IAAIF,KAAJ,CACJ,2DADI,CAAN;AAGD;;AACD,UAAME,IAAN,EAAYC,OAAZ,EAAqBC,IAArB;AACD;;AAdwC,C,CAiB3C;;;AAEA,SAASU,cAAT,CAAwBZ,IAAxB,EAA8B;AAC5B,SAAOG,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,KAA0BA,IAAI,IAAI,IAAlC,IAA0CA,IAAI,IAAI,IAAzD;AACD;;AAED,SAASU,iBAAT,CAA2BG,CAA3B,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,KAAK,YAAd,EAA4B;AAC1B;AACD;;AACD,SAAOA,KAAP;AACD,C,CAED;;;AAEAC,MAAM,CAACC,OAAP,GAAkB;AAChBnB,EAAAA,YADgB;AAEhBc,EAAAA;AAFgB,CAAlB","sourcesContent":["\r\nconst safeStringify = require('fast-safe-stringify')\r\n\r\n/**\r\n * @class JsonRpcError\r\n * Error subclass implementing JSON RPC 2.0 errors.\r\n * Permits any integer error code.\r\n */\r\nclass JsonRpcError extends Error {\r\n\r\n  /**\r\n   * Create a JSON RPC error.\r\n   * @param {number} code - The integer error code.\r\n   * @param {string} message - The string message.\r\n   * @param {any} [data] - The error data.\r\n   */\r\n  constructor (code, message, data) {\r\n\r\n    if (!Number.isInteger(code)) throw new Error(\r\n      '\"code\" must be an integer.'\r\n    )\r\n    if (!message || typeof message !== 'string') throw new Error(\r\n      '\"message\" must be a nonempty string.'\r\n    )\r\n\r\n    super(message)\r\n    this.code = code\r\n    if (data !== undefined) this.data = data\r\n  }\r\n\r\n  /**\r\n   * Returns a plain object with all public class properties.\r\n   * @returns {object} The serialized error. \r\n   */\r\n  serialize() {\r\n    const serialized = {\r\n      code: this.code,\r\n      message: this.message,\r\n    }\r\n    if (this.data !== undefined) serialized.data = this.data\r\n    if (this.stack) serialized.stack = this.stack\r\n    return serialized\r\n  }\r\n\r\n  /**\r\n   * Return a string representation of the serialized error, omitting\r\n   * any circular references.\r\n   * @returns {string} The serialized error as a string.\r\n   */\r\n  toString() {\r\n    return safeStringify(\r\n      this.serialize(),\r\n      stringifyReplacer,\r\n      2\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * @class EthJsonRpcError\r\n * Error subclass implementing Ethereum JSON RPC errors.\r\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\r\n */\r\nclass EthJsonRpcError extends JsonRpcError {\r\n  /**\r\n   * Create an Ethereum JSON RPC error.\r\n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\r\n   * @param {string} message - The string message.\r\n   * @param {any} [data] - The error data.\r\n   */\r\n  constructor(code, message, data) {\r\n    if (!isValidEthCode(code)) {\r\n      throw new Error(\r\n        '\"code\" must be an integer such that: 1000 <= code <= 4999'\r\n      )\r\n    }\r\n    super(code, message, data)\r\n  }\r\n}\r\n\r\n// Internal\r\n\r\nfunction isValidEthCode(code) {\r\n  return Number.isInteger(code) && code >= 1000 && code <= 4999\r\n}\r\n\r\nfunction stringifyReplacer(_, value) {\r\n  if (value === '[Circular]') {\r\n    return\r\n  }\r\n  return value\r\n}\r\n\r\n// Exports\r\n\r\nmodule.exports =  {\r\n  JsonRpcError,\r\n  EthJsonRpcError,\r\n}\r\n"]},"metadata":{},"sourceType":"script"}