{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\"; // @TODO: Merge this with bytes\n\nexport class FixedBytesCoder extends Coder {\n  constructor(size, localName) {\n    let name = \"bytes\" + String(size);\n    super(name, name, localName, false);\n    this.size = size;\n  }\n\n  encode(writer, value) {\n    let data = arrayify(value);\n\n    if (data.length !== this.size) {\n      this._throwError(\"incorrect data length\", value);\n    }\n\n    return writer.writeBytes(data);\n  }\n\n  decode(reader) {\n    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n  }\n\n}","map":{"version":3,"sources":["F:/7color/node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"],"names":["arrayify","hexlify","Coder","FixedBytesCoder","constructor","size","localName","name","String","encode","writer","value","data","length","_throwError","writeBytes","decode","reader","coerce","readBytes"],"mappings":"AAAA;;AACA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,sBAAlC;AACA,SAASC,KAAT,QAAsB,kBAAtB,C,CACA;;AACA,OAAO,MAAMC,eAAN,SAA8BD,KAA9B,CAAoC;AACvCE,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkB;AACzB,QAAIC,IAAI,GAAG,UAAUC,MAAM,CAACH,IAAD,CAA3B;AACA,UAAME,IAAN,EAAYA,IAAZ,EAAkBD,SAAlB,EAA6B,KAA7B;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACH;;AACDI,EAAAA,MAAM,CAACC,MAAD,EAASC,KAAT,EAAgB;AAClB,QAAIC,IAAI,GAAGZ,QAAQ,CAACW,KAAD,CAAnB;;AACA,QAAIC,IAAI,CAACC,MAAL,KAAgB,KAAKR,IAAzB,EAA+B;AAC3B,WAAKS,WAAL,CAAiB,uBAAjB,EAA0CH,KAA1C;AACH;;AACD,WAAOD,MAAM,CAACK,UAAP,CAAkBH,IAAlB,CAAP;AACH;;AACDI,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,WAAOA,MAAM,CAACC,MAAP,CAAc,KAAKX,IAAnB,EAAyBN,OAAO,CAACgB,MAAM,CAACE,SAAP,CAAiB,KAAKd,IAAtB,CAAD,CAAhC,CAAP;AACH;;AAfsC","sourcesContent":["\"use strict\";\r\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\r\nimport { Coder } from \"./abstract-coder\";\r\n// @TODO: Merge this with bytes\r\nexport class FixedBytesCoder extends Coder {\r\n    constructor(size, localName) {\r\n        let name = \"bytes\" + String(size);\r\n        super(name, name, localName, false);\r\n        this.size = size;\r\n    }\r\n    encode(writer, value) {\r\n        let data = arrayify(value);\r\n        if (data.length !== this.size) {\r\n            this._throwError(\"incorrect data length\", value);\r\n        }\r\n        return writer.writeBytes(data);\r\n    }\r\n    decode(reader) {\r\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}