{"ast":null,"code":"import config from \"../config\";\nimport async from 'async';\nimport { ERROR, CONNECTION_CONNECTED, CONNECTION_DISCONNECTED, GET_BALANCES, BALANCES_RETURNED, GET_BALANCES_LIGHT, BALANCES_LIGHT_RETURNED, GET_USD_PRICE, USD_PRICE_RETURNED, GET_BEST_PRICE, BEST_PRICE_RETURNED, SWAP, SWAP_RETURNED, GET_TOEKEN_DASHBOARD_SNAPSHOT, TOEKEN_DASHBOARD_SNAPSHOT_RETURNED } from '../constants';\nimport Web3 from 'web3';\nimport { injected, walletconnect, walletlink, ledger, trezor, frame, fortmatic, portis, squarelink, torus, authereum } from \"./connectors\";\n\nconst rp = require('request-promise');\n\nconst ethers = require('ethers');\n\nconst bigNumberify = ethers.utils.bigNumberify;\n\nconst Dispatcher = require('flux').Dispatcher;\n\nconst Emitter = require('events').EventEmitter;\n\nconst dispatcher = new Dispatcher();\nconst emitter = new Emitter();\n\nclass Store {\n  constructor() {\n    this._checkApproval = async (asset, account, amount, contract, callback) => {\n      if (asset.erc20address === 'Ethereum') {\n        return callback();\n      }\n\n      const web3 = new Web3(store.getStore('web3context').library.provider);\n      let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address);\n\n      try {\n        const allowance = await erc20Contract.methods.allowance(account.address, contract).call({\n          from: account.address\n        });\n        const ethAllowance = web3.utils.fromWei(allowance, \"ether\");\n\n        if (parseFloat(ethAllowance) < parseFloat(amount)) {\n          /*\r\n            code to accomodate for \"assert _value == 0 or self.allowances[msg.sender][_spender] == 0\" in contract\r\n            We check to see if the allowance is > 0. If > 0 set to 0 before we set it to the correct amount.\r\n          */\n          await erc20Contract.methods.approve(contract, web3.utils.toWei('999999999999', \"ether\")).send({\n            from: account.address,\n            gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n          });\n          callback();\n        } else {\n          callback();\n        }\n      } catch (error) {\n        if (error.message) {\n          return callback(error.message);\n        }\n\n        callback(error);\n      }\n    };\n\n    this._checkApprovalWaitForConfirmation = async (asset, account, amount, contract, callback) => {\n      const web3 = new Web3(store.getStore('web3context').library.provider);\n      let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address);\n      const allowance = await erc20Contract.methods.allowance(account.address, contract).call({\n        from: account.address\n      });\n      const ethAllowance = web3.utils.fromWei(allowance, \"ether\");\n      erc20Contract.methods.approve(contract, web3.utils.toWei(amount, \"ether\")).send({\n        from: account.address,\n        gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n      }).on('transactionHash', function (hash) {\n        callback();\n      }).on('error', function (error) {\n        if (!error.toString().includes(\"-32601\")) {\n          if (error.message) {\n            return callback(error.message);\n          }\n\n          callback(error);\n        }\n      });\n    };\n\n    this.getERC20Balance = (asset, account) => {\n      const web3 = new Web3(store.getStore('web3context').library.provider);\n      let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.address);\n\n      try {\n        console.log(account);\n        var balance = erc20Contract.methods.balanceOf(account).call({\n          from: account.address\n        });\n        console.log(balance);\n        balance = parseFloat(balance) / 10 ** asset.decimals;\n        return parseFloat(balance);\n      } catch (ex) {\n        console.log(ex);\n      }\n    };\n\n    this._getBalance = async (web3, asset, account, callback) => {\n      if (asset.erc20address === 'Ethereum') {\n        try {\n          const eth_balance = web3.utils.fromWei(await web3.eth.getBalance(asset.iEarnContract), \"ether\");\n          callback(null, parseFloat(eth_balance));\n        } catch (ex) {\n          console.log(ex);\n          return callback(ex);\n        }\n      } else {\n        let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address);\n\n        try {\n          var balance = await erc20Contract.methods.balanceOf(asset.iEarnContract).call({\n            from: account.address\n          });\n          balance = parseFloat(balance) / 10 ** asset.decimals;\n          callback(null, parseFloat(balance));\n        } catch (ex) {\n          console.log(ex);\n          return callback(ex);\n        }\n      }\n    };\n\n    this.mulitSwap = payload => {\n      const account = store.getStore('account');\n      const {\n        sendAsset,\n        amount\n      } = payload.content;\n      let yCurveZapSwapContract = config.yCurveZapSwapAddress;\n\n      if (sendAsset.id === 'crvV3') {\n        yCurveZapSwapContract = config.yCurveZapSwapV4Address;\n      }\n\n      this._checkApproval(sendAsset, account, amount, yCurveZapSwapContract, err => {\n        if (err) {\n          return emitter.emit(ERROR, err);\n        }\n\n        this._callSwap(sendAsset, account, amount, (err, swapResult) => {\n          if (err) {\n            return emitter.emit(ERROR, err);\n          }\n\n          return emitter.emit(SWAP_RETURNED, swapResult);\n        });\n      });\n    };\n\n    this._callSwap = async (sendAsset, account, amount, callback) => {\n      const web3 = new Web3(store.getStore('web3context').library.provider);\n      var amountToSend = web3.utils.toWei(amount, \"ether\");\n\n      if (sendAsset.decimals !== 18) {\n        amountToSend = amount * 10 ** sendAsset.decimals;\n      }\n\n      let call = '';\n\n      switch (sendAsset.id) {\n        case 'crvV1':\n          call = 'swapv1tov3';\n          break;\n\n        case 'crvV2':\n          call = 'swapv2tov3';\n          break;\n\n        case 'crvV3':\n          call = 'swapv3tov4';\n          break;\n\n        default:\n      }\n\n      let yCurveZapSwapContract = new web3.eth.Contract(config.yCurveZapSwapABI, config.yCurveZapSwapAddress);\n\n      if (sendAsset.id === 'crvV3') {\n        yCurveZapSwapContract = new web3.eth.Contract(config.yCurveZapSwapV4ABI, config.yCurveZapSwapV4Address);\n      }\n\n      yCurveZapSwapContract.methods[call](amountToSend).send({\n        from: account.address,\n        gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n      }).on('transactionHash', function (hash) {\n        console.log(hash);\n        callback(null, hash);\n      }).on('confirmation', function (confirmationNumber, receipt) {\n        console.log(confirmationNumber, receipt);\n      }).on('receipt', function (receipt) {\n        console.log(receipt);\n      }).on('error', function (error) {\n        if (!error.toString().includes(\"-32601\")) {\n          if (error.message) {\n            return callback(error.message);\n          }\n\n          callback(error);\n        }\n      }).catch(error => {\n        if (!error.toString().includes(\"-32601\")) {\n          if (error.message) {\n            return callback(error.message);\n          }\n\n          callback(error);\n        }\n      });\n    };\n\n    this._getERC20Balance = payload => {\n      const account = store.getStore('account');\n      const {\n        sendAsset,\n        receiveAsset,\n        amount\n      } = payload.content;\n\n      this._getExceptedReturn(sendAsset, receiveAsset, amount, config.OneSplitcontract, (err, {\n        returnAmount,\n        distribution\n      }) => {\n        if (err) {\n          return emitter.emit(ERROR, err);\n        }\n\n        return emitter.emit(BEST_PRICE_RETURNED, {\n          returnAmount,\n          distribution\n        });\n      });\n    };\n\n    this._getExceptedReturn = () => {};\n\n    this._getUSDPrices = async () => {\n      try {\n        const url = 'https://api.coingecko.com/api/v3/simple/price?ids=usd-coin,dai,true-usd,tether,usd-coin,chainlink,yearn-finance,binance-usd,wrapped-bitcoin,ethereum,nusd,chainlink,aave-link,lp-sbtc-curve,lp-bcurve,curve-fi-ydai-yusdc-yusdt-ytusd&vs_currencies=usd,eth';\n        const priceString = await rp(url);\n        const priceJSON = JSON.parse(priceString);\n        return priceJSON;\n      } catch (e) {\n        console.log(e);\n        return null;\n      }\n    };\n\n    this._getAssetUSDPrices = async (web3, asset, account, usdPrices, callback) => {\n      try {\n        const vaultContract = new web3.eth.Contract(asset.vaultContractABI, asset.vaultContractAddress);\n        const pricePerFullShare = await vaultContract.methods.getPricePerFullShare().call({\n          from: account.address\n        });\n        const usdPrice = usdPrices[asset.price_id];\n        const returnObj = {\n          pricePerFullShare: pricePerFullShare / 1e18,\n          usdPrice: usdPrice.usd\n        };\n        callback(null, returnObj);\n      } catch (ex) {\n        callback(null, {});\n      }\n    };\n\n    this._checkApproval = async (asset, account, amount, contract, callback) => {\n      if (asset.erc20address === 'Ethereum') {\n        return callback();\n      }\n\n      const web3 = new Web3(store.getStore('web3context').library.provider);\n      let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address);\n\n      try {\n        const allowance = await erc20Contract.methods.allowance(account.address, contract).call({\n          from: account.address\n        });\n        const ethAllowance = web3.utils.fromWei(allowance, \"ether\");\n\n        if (parseFloat(ethAllowance) < parseFloat(amount)) {\n          /*\r\n            code to accomodate for \"assert _value == 0 or self.allowances[msg.sender][_spender] == 0\" in contract\r\n            We check to see if the allowance is > 0. If > 0 set to 0 before we set it to the correct amount.\r\n          */\n          if (['crvV1', 'crvV2', 'crvV3', 'crvV4', 'USDTv1', 'USDTv2', 'USDTv3', 'USDT', 'sCRV'].includes(asset.id) && ethAllowance > 0) {\n            await erc20Contract.methods.approve(contract, web3.utils.toWei('0', \"ether\")).send({\n              from: account.address,\n              gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n            });\n          }\n\n          await erc20Contract.methods.approve(contract, web3.utils.toWei('999999999999', \"ether\")).send({\n            from: account.address,\n            gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n          });\n          callback();\n        } else {\n          callback();\n        }\n      } catch (error) {\n        if (error.message) {\n          return callback(error.message);\n        }\n\n        callback(error);\n      }\n    };\n\n    this._checkIfApprovalIsNeeded = async (asset, account, amount, contract, callback) => {\n      const web3 = new Web3(store.getStore('web3context').library.provider);\n      let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address);\n      const allowance = await erc20Contract.methods.allowance(account.address, contract).call({\n        from: account.address\n      });\n      const ethAllowance = web3.utils.fromWei(allowance, \"ether\");\n\n      if (parseFloat(ethAllowance) < parseFloat(amount)) {\n        asset.amount = amount;\n        callback(null, asset);\n      } else {\n        callback(null, false);\n      }\n    };\n\n    this._callApproval = async (asset, account, amount, contract, last, callback) => {\n      const web3 = new Web3(store.getStore('web3context').library.provider);\n      let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address);\n\n      try {\n        if (['crvV1', 'crvV2', 'crvV3', 'crvV4', 'USDTv1', 'USDTv2', 'USDTv3', 'USDT'].includes(asset.id)) {\n          const allowance = await erc20Contract.methods.allowance(account.address, contract).call({\n            from: account.address\n          });\n          const ethAllowance = web3.utils.fromWei(allowance, \"ether\");\n\n          if (ethAllowance > 0) {\n            erc20Contract.methods.approve(contract, web3.utils.toWei('0', \"ether\")).send({\n              from: account.address,\n              gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n            }).on('transactionHash', function (hash) {//success...\n            }).on('error', function (error) {\n              if (!error.toString().includes(\"-32601\")) {\n                if (error.message) {\n                  return callback(error.message);\n                }\n\n                callback(error);\n              }\n            });\n          }\n        }\n\n        if (last) {\n          await erc20Contract.methods.approve(contract, web3.utils.toWei(amount, \"ether\")).send({\n            from: account.address,\n            gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n          });\n          callback();\n        } else {\n          erc20Contract.methods.approve(contract, web3.utils.toWei(amount, \"ether\")).send({\n            from: account.address,\n            gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei')\n          }).on('transactionHash', function (hash) {\n            callback();\n          }).on('error', function (error) {\n            if (!error.toString().includes(\"-32601\")) {\n              if (error.message) {\n                return callback(error.message);\n              }\n\n              callback(error);\n            }\n          });\n        }\n      } catch (error) {\n        if (error.message) {\n          return callback(error.message);\n        }\n\n        callback(error);\n      }\n    };\n\n    this.getUSDPrices = async () => {\n      try {\n        const priceJSON = await this._getUSDPrices();\n        store.setStore({\n          usdPrices: priceJSON\n        });\n        return emitter.emit(USD_PRICE_RETURNED, priceJSON);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    this._getUSDPrices = async () => {\n      try {\n        const url = 'https://api.coingecko.com/api/v3/simple/price?ids=usd-coin,dai,true-usd,tether,usd-coin,chainlink,yearn-finance,binance-usd,wrapped-bitcoin,ethereum,nusd,chainlink,aave-link,lp-sbtc-curve,lp-bcurve,curve-fi-ydai-yusdc-yusdt-ytusd&vs_currencies=usd,eth';\n        const priceString = await rp(url);\n        const priceJSON = JSON.parse(priceString);\n        return priceJSON;\n      } catch (e) {\n        console.log(e);\n        return null;\n      }\n    };\n\n    this._getGasPrice = async () => {\n      try {\n        const url = 'https://gasprice.poa.network/';\n        const priceString = await rp(url);\n        const priceJSON = JSON.parse(priceString);\n\n        if (priceJSON) {\n          return priceJSON.fast.toFixed(0);\n        }\n\n        return store.getStore('universalGasPrice');\n      } catch (e) {\n        console.log(e);\n        return store.getStore('universalGasPrice');\n      }\n    };\n\n    this._getWeb3Provider = async () => {\n      const web3context = store.getStore('web3context');\n\n      if (!web3context) {\n        return null;\n      }\n\n      const provider = web3context.library.provider;\n\n      if (!provider) {\n        return null;\n      }\n\n      const web3 = new Web3(provider); // const web3 = createAlchemyWeb3(config.infuraProvider, { writeProvider: provider });\n\n      return web3;\n    };\n\n    this.getWeightOfBalances = async payload => {\n      const account = store.getStore('account');\n      const assets = store.getStore('assets');\n\n      if (!account || !account.address) {\n        return false;\n      }\n\n      const web3 = await this._getWeb3Provider();\n    };\n\n    this.getloadTokenList = async payload => {\n      const account = store.getStore('account'); // console.log(account)\n      // const { asset, amount } = payload.content\n\n      const url = \"https://wispy-bird-88a7.uniswap.workers.dev/?url=http://tokens.1inch.eth.link\";\n      const res = await rp(url);\n      const jsonRes = await JSON.parse(res);\n      var tokens = Array.from(jsonRes.tokens);\n      var tokens = tokens.map(item => {\n        const container = {};\n        container.address = item.address;\n        container.decimals = item.decimals;\n        container.symbol = item.symbol;\n        container.iconUrl = item.logoURI; // container.balance = this._getERC20Balance(item, account)\n\n        return container;\n      }); // console.log(tokens)\n\n      var eth = {\n        address: \"0x0000000000000000000000000000000000000000\",\n        symbol: \"ETH\",\n        decimals: 18,\n        iconUrl: \"src/assets/eth.png\"\n      };\n      tokens.push(eth);\n      let dashboard = {\n        tokenList: tokens\n      };\n      store.setStore({\n        dashboard: dashboard\n      });\n      emitter.emit(TOEKEN_DASHBOARD_SNAPSHOT_RETURNED, dashboard); // console.log(store.getStore('dashboard'))\n    };\n\n    this.getDashboardSnapshot = payload => {\n      this.getloadTokenList(payload);\n    };\n\n    this.store = {\n      statisticsProvider: 'raw',\n      statistics: [],\n      universalGasPrice: '70',\n      ethPrice: 0,\n      usdPrices: null,\n      account: {},\n      web3: null,\n      events: [],\n      mulitSwap: {\n        tokenList: []\n      },\n      connectorsByName: {\n        MetaMask: injected,\n        TrustWallet: injected,\n        WalletConnect: walletconnect,\n        WalletLink: walletlink,\n        Ledger: ledger,\n        Trezor: trezor,\n        Frame: frame,\n        Fortmatic: fortmatic,\n        Portis: portis,\n        Squarelink: squarelink,\n        Torus: torus,\n        Authereum: authereum\n      },\n      builtWith: [{\n        website: 'https://uniswap.org',\n        logo: 'uniswap.png',\n        name: 'Uniswap'\n      }, {\n        website: 'https://www.ethereum.org',\n        logo: 'ethereum.png',\n        name: 'ethereum'\n      }, {\n        website: 'https://etherscan.io',\n        logo: 'etherscan.png',\n        name: 'Etherscan'\n      }],\n      web3context: null,\n      languages: [{\n        language: 'English',\n        code: 'en'\n      }, {\n        language: 'Japanese',\n        code: 'ja'\n      }, {\n        language: 'Chinese',\n        code: 'zh'\n      }],\n      ethBalance: 0\n    };\n    dispatcher.register(function (payload) {\n      switch (payload.type) {\n        case GET_BALANCES:\n          this.getERC20Balance(payload);\n          break;\n\n        case SWAP:\n          this.mulitSwap(payload);\n          break;\n\n        case GET_BEST_PRICE:\n          this.getExceptedReturn(payload);\n          break;\n\n        case GET_TOEKEN_DASHBOARD_SNAPSHOT:\n          this.getloadTokenList(payload);\n          break;\n\n        default:\n          {}\n      }\n    }.bind(this));\n  }\n\n  getStore(index) {\n    return this.store[index];\n  }\n\n  setStore(obj) {\n    this.store = { ...this.store,\n      ...obj\n    };\n    return emitter.emit('StoreUpdated');\n  }\n\n}\n\nvar store = new Store();\nexport default {\n  store: store,\n  dispatcher: dispatcher,\n  emitter: emitter\n};","map":{"version":3,"sources":["F:/7color/src/stores/store.jsx"],"names":["config","async","ERROR","CONNECTION_CONNECTED","CONNECTION_DISCONNECTED","GET_BALANCES","BALANCES_RETURNED","GET_BALANCES_LIGHT","BALANCES_LIGHT_RETURNED","GET_USD_PRICE","USD_PRICE_RETURNED","GET_BEST_PRICE","BEST_PRICE_RETURNED","SWAP","SWAP_RETURNED","GET_TOEKEN_DASHBOARD_SNAPSHOT","TOEKEN_DASHBOARD_SNAPSHOT_RETURNED","Web3","injected","walletconnect","walletlink","ledger","trezor","frame","fortmatic","portis","squarelink","torus","authereum","rp","require","ethers","bigNumberify","utils","Dispatcher","Emitter","EventEmitter","dispatcher","emitter","Store","constructor","_checkApproval","asset","account","amount","contract","callback","erc20address","web3","store","getStore","library","provider","erc20Contract","eth","Contract","erc20ABI","allowance","methods","address","call","from","ethAllowance","fromWei","parseFloat","approve","toWei","send","gasPrice","_getGasPrice","error","message","_checkApprovalWaitForConfirmation","on","hash","toString","includes","getERC20Balance","console","log","balance","balanceOf","decimals","ex","_getBalance","eth_balance","getBalance","iEarnContract","mulitSwap","payload","sendAsset","content","yCurveZapSwapContract","yCurveZapSwapAddress","id","yCurveZapSwapV4Address","err","emit","_callSwap","swapResult","amountToSend","yCurveZapSwapABI","yCurveZapSwapV4ABI","confirmationNumber","receipt","catch","_getERC20Balance","receiveAsset","_getExceptedReturn","OneSplitcontract","returnAmount","distribution","_getUSDPrices","url","priceString","priceJSON","JSON","parse","e","_getAssetUSDPrices","usdPrices","vaultContract","vaultContractABI","vaultContractAddress","pricePerFullShare","getPricePerFullShare","usdPrice","price_id","returnObj","usd","_checkIfApprovalIsNeeded","_callApproval","last","getUSDPrices","setStore","fast","toFixed","_getWeb3Provider","web3context","getWeightOfBalances","assets","getloadTokenList","res","jsonRes","tokens","Array","map","item","container","symbol","iconUrl","logoURI","push","dashboard","tokenList","getDashboardSnapshot","statisticsProvider","statistics","universalGasPrice","ethPrice","events","connectorsByName","MetaMask","TrustWallet","WalletConnect","WalletLink","Ledger","Trezor","Frame","Fortmatic","Portis","Squarelink","Torus","Authereum","builtWith","website","logo","name","languages","language","code","ethBalance","register","type","getExceptedReturn","bind","index","obj"],"mappings":"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","sourcesContent":["import config from \"../config\";\r\nimport async from 'async';\r\nimport {\r\n  ERROR,\r\n  CONNECTION_CONNECTED,\r\n  CONNECTION_DISCONNECTED,\r\n  GET_BALANCES,\r\n  BALANCES_RETURNED,\r\n  GET_BALANCES_LIGHT,\r\n  BALANCES_LIGHT_RETURNED,\r\n  GET_USD_PRICE,\r\n  USD_PRICE_RETURNED,\r\n  GET_BEST_PRICE,\r\n  BEST_PRICE_RETURNED,\r\n  SWAP,\r\n  SWAP_RETURNED,\r\n  GET_TOEKEN_DASHBOARD_SNAPSHOT,\r\n  TOEKEN_DASHBOARD_SNAPSHOT_RETURNED\r\n} from '../constants';\r\nimport Web3 from 'web3';\r\n\r\nimport {\r\n  injected,\r\n  walletconnect,\r\n  walletlink,\r\n  ledger,\r\n  trezor,\r\n  frame,\r\n  fortmatic,\r\n  portis,\r\n  squarelink,\r\n  torus,\r\n  authereum\r\n} from \"./connectors\";\r\n\r\nconst rp = require('request-promise');\r\nconst ethers = require('ethers');\r\nconst bigNumberify = ethers.utils.bigNumberify;\r\n\r\nconst Dispatcher = require('flux').Dispatcher;\r\nconst Emitter = require('events').EventEmitter;\r\n\r\nconst dispatcher = new Dispatcher();\r\nconst emitter = new Emitter();\r\n\r\nclass Store {\r\n  constructor() {\r\n\r\n    this.store = {\r\n      statisticsProvider: 'raw',\r\n      statistics: [],\r\n      universalGasPrice: '70',\r\n      ethPrice: 0,\r\n      usdPrices: null,\r\n      account: {},\r\n      web3: null,\r\n      events: [],\r\n      mulitSwap: {\r\n        tokenList: []\r\n      },\r\n      connectorsByName: {\r\n        MetaMask: injected,\r\n        TrustWallet: injected,\r\n        WalletConnect: walletconnect,\r\n        WalletLink: walletlink,\r\n        Ledger: ledger,\r\n        Trezor: trezor,\r\n        Frame: frame,\r\n        Fortmatic: fortmatic,\r\n        Portis: portis,\r\n        Squarelink: squarelink,\r\n        Torus: torus,\r\n        Authereum: authereum\r\n      },\r\n      builtWith: [\r\n        {\r\n          website: 'https://uniswap.org',\r\n          logo: 'uniswap.png',\r\n          name: 'Uniswap'\r\n        },\r\n        {\r\n          website: 'https://www.ethereum.org',\r\n          logo: 'ethereum.png',\r\n          name: 'ethereum'\r\n        },\r\n        {\r\n          website: 'https://etherscan.io',\r\n          logo: 'etherscan.png',\r\n          name: 'Etherscan'\r\n        }\r\n      ],\r\n      web3context: null,\r\n      languages: [\r\n        {\r\n          language: 'English',\r\n          code: 'en'\r\n        },\r\n        {\r\n          language: 'Japanese',\r\n          code: 'ja'\r\n        },\r\n        {\r\n          language: 'Chinese',\r\n          code: 'zh'\r\n        }\r\n      ],\r\n      ethBalance: 0\r\n    }\r\n\r\n    dispatcher.register(\r\n      function (payload) {\r\n        switch (payload.type) {\r\n          case GET_BALANCES:\r\n            this.getERC20Balance(payload);\r\n            break;\r\n          case SWAP:\r\n            this.mulitSwap(payload)\r\n            break;\r\n          case GET_BEST_PRICE:\r\n            this.getExceptedReturn(payload)\r\n            break;\r\n          case GET_TOEKEN_DASHBOARD_SNAPSHOT:\r\n            this.getloadTokenList(payload)\r\n            break;\r\n          default: {\r\n          }\r\n        }\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  getStore(index) {\r\n    return(this.store[index]);\r\n  };\r\n\r\n  setStore(obj) {\r\n    this.store = {...this.store, ...obj}\r\n    return emitter.emit('StoreUpdated');\r\n  };\r\n\r\n  _checkApproval = async (asset, account, amount, contract, callback) => {\r\n\r\n    if(asset.erc20address === 'Ethereum') {\r\n      return callback()\r\n    }\r\n\r\n    const web3 = new Web3(store.getStore('web3context').library.provider);\r\n    let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address)\r\n    try {\r\n      const allowance = await erc20Contract.methods.allowance(account.address, contract).call({ from: account.address })\r\n\r\n      const ethAllowance = web3.utils.fromWei(allowance, \"ether\")\r\n\r\n      if(parseFloat(ethAllowance) < parseFloat(amount)) {\r\n        /*\r\n          code to accomodate for \"assert _value == 0 or self.allowances[msg.sender][_spender] == 0\" in contract\r\n          We check to see if the allowance is > 0. If > 0 set to 0 before we set it to the correct amount.\r\n        */\r\n        await erc20Contract.methods.approve(contract, web3.utils.toWei('999999999999', \"ether\")).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n        callback()\r\n      } else {\r\n        callback()\r\n      }\r\n    } catch(error) {\r\n      if(error.message) {\r\n        return callback(error.message)\r\n      }\r\n      callback(error)\r\n    }\r\n  }\r\n\r\n  _checkApprovalWaitForConfirmation = async (asset, account, amount, contract, callback) => {\r\n    const web3 = new Web3(store.getStore('web3context').library.provider);\r\n    let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address)\r\n    const allowance = await erc20Contract.methods.allowance(account.address, contract).call({ from: account.address })\r\n\r\n    const ethAllowance = web3.utils.fromWei(allowance, \"ether\")\r\n\r\n    erc20Contract.methods.approve(contract, web3.utils.toWei(amount, \"ether\")).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n          .on('transactionHash', function(hash){\r\n            callback()\r\n          })\r\n          .on('error', function(error) {\r\n            if (!error.toString().includes(\"-32601\")) {\r\n              if(error.message) {\r\n                return callback(error.message)\r\n              }\r\n              callback(error)\r\n            }\r\n      })\r\n    }\r\n\r\n  getERC20Balance = (asset, account) => {\r\n    const web3 = new Web3(store.getStore('web3context').library.provider);\r\n    let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.address)\r\n    try {\r\n      console.log(account)\r\n      var balance = erc20Contract.methods.balanceOf(account).call({ from: account.address });\r\n      console.log(balance)\r\n      balance = parseFloat(balance)/10**asset.decimals\r\n      return parseFloat(balance)\r\n    } catch(ex) {\r\n      console.log(ex)\r\n    }\r\n  }\r\n\r\n  _getBalance = async (web3, asset, account, callback) => {\r\n\r\n    if(asset.erc20address === 'Ethereum') {\r\n      try {\r\n        const eth_balance = web3.utils.fromWei(await web3.eth.getBalance(asset.iEarnContract), \"ether\");\r\n        callback(null, parseFloat(eth_balance))\r\n      } catch(ex) {\r\n        console.log(ex)\r\n        return callback(ex)\r\n      }\r\n    } else {\r\n      let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address)\r\n\r\n      try {\r\n        var balance = await erc20Contract.methods.balanceOf(asset.iEarnContract).call({ from: account.address });\r\n        balance = parseFloat(balance)/10**asset.decimals\r\n        callback(null, parseFloat(balance))\r\n      } catch(ex) {\r\n        console.log(ex)\r\n        return callback(ex)\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  mulitSwap = (payload) => {\r\n    const account = store.getStore('account')\r\n    const { sendAsset, amount } = payload.content\r\n\r\n    let yCurveZapSwapContract = config.yCurveZapSwapAddress\r\n    if (sendAsset.id === 'crvV3') {\r\n      yCurveZapSwapContract = config.yCurveZapSwapV4Address\r\n    }\r\n\r\n    this._checkApproval(sendAsset, account, amount, yCurveZapSwapContract, (err) => {\r\n      if(err) {\r\n        return emitter.emit(ERROR, err);\r\n      }\r\n\r\n      this._callSwap(sendAsset, account, amount, (err, swapResult) => {\r\n        if(err) {\r\n          return emitter.emit(ERROR, err);\r\n        }\r\n\r\n        return emitter.emit(SWAP_RETURNED, swapResult)\r\n      })\r\n    })\r\n  }\r\n\r\n  _callSwap = async (sendAsset, account, amount, callback) => {\r\n    const web3 = new Web3(store.getStore('web3context').library.provider);\r\n\r\n    var amountToSend = web3.utils.toWei(amount, \"ether\")\r\n    if (sendAsset.decimals !== 18) {\r\n      amountToSend = amount*10**sendAsset.decimals;\r\n    }\r\n\r\n    let call = ''\r\n\r\n    switch (sendAsset.id) {\r\n      case 'crvV1':\r\n        call = 'swapv1tov3'\r\n        break;\r\n      case 'crvV2':\r\n        call = 'swapv2tov3'\r\n        break;\r\n      case 'crvV3':\r\n        call = 'swapv3tov4'\r\n        break;\r\n      default:\r\n    }\r\n\r\n    let yCurveZapSwapContract = new web3.eth.Contract(config.yCurveZapSwapABI, config.yCurveZapSwapAddress)\r\n    if (sendAsset.id === 'crvV3') {\r\n      yCurveZapSwapContract = new web3.eth.Contract(config.yCurveZapSwapV4ABI, config.yCurveZapSwapV4Address)\r\n    }\r\n    yCurveZapSwapContract.methods[call](amountToSend).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n      .on('transactionHash', function(hash){\r\n        console.log(hash)\r\n        callback(null, hash)\r\n      })\r\n      .on('confirmation', function(confirmationNumber, receipt){\r\n        console.log(confirmationNumber, receipt);\r\n      })\r\n      .on('receipt', function(receipt){\r\n        console.log(receipt);\r\n      })\r\n      .on('error', function(error) {\r\n        if (!error.toString().includes(\"-32601\")) {\r\n          if(error.message) {\r\n            return callback(error.message)\r\n          }\r\n          callback(error)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (!error.toString().includes(\"-32601\")) {\r\n          if(error.message) {\r\n            return callback(error.message)\r\n          }\r\n          callback(error)\r\n        }\r\n      })\r\n  }\r\n\r\n  _getERC20Balance = (payload) => {\r\n    const account = store.getStore('account')\r\n    const { sendAsset, receiveAsset, amount } = payload.content\r\n\r\n    this._getExceptedReturn(sendAsset, receiveAsset, amount, config.OneSplitcontract, (err, {returnAmount, distribution}) => {\r\n      if(err) {\r\n        return emitter.emit(ERROR, err);\r\n      }\r\n      return emitter.emit(BEST_PRICE_RETURNED, {returnAmount, distribution})\r\n    })\r\n  }\r\n\r\n  _getExceptedReturn = () => {\r\n\r\n  }\r\n\r\n  _getUSDPrices = async () => {\r\n    try {\r\n      const url = 'https://api.coingecko.com/api/v3/simple/price?ids=usd-coin,dai,true-usd,tether,usd-coin,chainlink,yearn-finance,binance-usd,wrapped-bitcoin,ethereum,nusd,chainlink,aave-link,lp-sbtc-curve,lp-bcurve,curve-fi-ydai-yusdc-yusdt-ytusd&vs_currencies=usd,eth'\r\n      const priceString = await rp(url);\r\n      const priceJSON = JSON.parse(priceString)\r\n\r\n      return priceJSON\r\n    } catch(e) {\r\n      console.log(e)\r\n      return null\r\n    }\r\n  }\r\n\r\n  _getAssetUSDPrices = async (web3, asset, account, usdPrices, callback) => {\r\n    try {\r\n      const vaultContract = new web3.eth.Contract(asset.vaultContractABI, asset.vaultContractAddress)\r\n      const pricePerFullShare = await vaultContract.methods.getPricePerFullShare().call({ from: account.address })\r\n\r\n      const usdPrice = usdPrices[asset.price_id]\r\n\r\n      const returnObj = {\r\n        pricePerFullShare: pricePerFullShare/1e18,\r\n        usdPrice: usdPrice.usd\r\n      }\r\n\r\n      callback(null, returnObj)\r\n\r\n    } catch (ex) {\r\n      callback(null, {})\r\n    }\r\n  }\r\n\r\n  _checkApproval = async (asset, account, amount, contract, callback) => {\r\n\r\n    if(asset.erc20address === 'Ethereum') {\r\n      return callback()\r\n    }\r\n\r\n    const web3 = new Web3(store.getStore('web3context').library.provider);\r\n    let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address)\r\n    try {\r\n      const allowance = await erc20Contract.methods.allowance(account.address, contract).call({ from: account.address })\r\n\r\n      const ethAllowance = web3.utils.fromWei(allowance, \"ether\")\r\n\r\n      if(parseFloat(ethAllowance) < parseFloat(amount)) {\r\n        /*\r\n          code to accomodate for \"assert _value == 0 or self.allowances[msg.sender][_spender] == 0\" in contract\r\n          We check to see if the allowance is > 0. If > 0 set to 0 before we set it to the correct amount.\r\n        */\r\n        if(['crvV1', 'crvV2', 'crvV3', 'crvV4', 'USDTv1', 'USDTv2', 'USDTv3', 'USDT', 'sCRV'].includes(asset.id) && ethAllowance > 0) {\r\n          await erc20Contract.methods.approve(contract, web3.utils.toWei('0', \"ether\")).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n        }\r\n\r\n        await erc20Contract.methods.approve(contract, web3.utils.toWei('999999999999', \"ether\")).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n        callback()\r\n      } else {\r\n        callback()\r\n      }\r\n    } catch(error) {\r\n      if(error.message) {\r\n        return callback(error.message)\r\n      }\r\n      callback(error)\r\n    }\r\n  }\r\n\r\n  _checkIfApprovalIsNeeded = async (asset, account, amount, contract, callback) => {\r\n    const web3 = new Web3(store.getStore('web3context').library.provider);\r\n    let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address)\r\n    const allowance = await erc20Contract.methods.allowance(account.address, contract).call({ from: account.address })\r\n\r\n    const ethAllowance = web3.utils.fromWei(allowance, \"ether\")\r\n    if(parseFloat(ethAllowance) < parseFloat(amount)) {\r\n      asset.amount = amount\r\n      callback(null, asset)\r\n    } else {\r\n      callback(null, false)\r\n    }\r\n  }\r\n\r\n  _callApproval = async (asset, account, amount, contract, last, callback) => {\r\n    const web3 = new Web3(store.getStore('web3context').library.provider);\r\n    let erc20Contract = new web3.eth.Contract(config.erc20ABI, asset.erc20address)\r\n    try {\r\n      if(['crvV1', 'crvV2', 'crvV3', 'crvV4', 'USDTv1', 'USDTv2', 'USDTv3', 'USDT'].includes(asset.id)) {\r\n        const allowance = await erc20Contract.methods.allowance(account.address, contract).call({ from: account.address })\r\n        const ethAllowance = web3.utils.fromWei(allowance, \"ether\")\r\n        if(ethAllowance > 0) {\r\n          erc20Contract.methods.approve(contract, web3.utils.toWei('0', \"ether\")).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n            .on('transactionHash', function(hash){\r\n              //success...\r\n            })\r\n            .on('error', function(error) {\r\n              if (!error.toString().includes(\"-32601\")) {\r\n                if(error.message) {\r\n                  return callback(error.message)\r\n                }\r\n                callback(error)\r\n              }\r\n            })\r\n        }\r\n      }\r\n\r\n      if(last) {\r\n        await erc20Contract.methods.approve(contract, web3.utils.toWei(amount, \"ether\")).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n        callback()\r\n      } else {\r\n        erc20Contract.methods.approve(contract, web3.utils.toWei(amount, \"ether\")).send({ from: account.address, gasPrice: web3.utils.toWei(await this._getGasPrice(), 'gwei') })\r\n          .on('transactionHash', function(hash){\r\n            callback()\r\n          })\r\n          .on('error', function(error) {\r\n            if (!error.toString().includes(\"-32601\")) {\r\n              if(error.message) {\r\n                return callback(error.message)\r\n              }\r\n              callback(error)\r\n            }\r\n          })\r\n      }\r\n    } catch(error) {\r\n      if(error.message) {\r\n        return callback(error.message)\r\n      }\r\n      callback(error)\r\n    }\r\n  }\r\n\r\n  getUSDPrices = async () => {\r\n    try {\r\n      const priceJSON = await this._getUSDPrices()\r\n      store.setStore({ usdPrices: priceJSON })\r\n      return emitter.emit(USD_PRICE_RETURNED, priceJSON)\r\n\r\n    } catch(e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  _getUSDPrices = async () => {\r\n    try {\r\n      const url = 'https://api.coingecko.com/api/v3/simple/price?ids=usd-coin,dai,true-usd,tether,usd-coin,chainlink,yearn-finance,binance-usd,wrapped-bitcoin,ethereum,nusd,chainlink,aave-link,lp-sbtc-curve,lp-bcurve,curve-fi-ydai-yusdc-yusdt-ytusd&vs_currencies=usd,eth'\r\n      const priceString = await rp(url);\r\n      const priceJSON = JSON.parse(priceString)\r\n\r\n      return priceJSON\r\n    } catch(e) {\r\n      console.log(e)\r\n      return null\r\n    }\r\n  }\r\n\r\n  _getGasPrice = async () => {\r\n    try {\r\n      const url = 'https://gasprice.poa.network/'\r\n      const priceString = await rp(url);\r\n      const priceJSON = JSON.parse(priceString)\r\n      if(priceJSON) {\r\n        return priceJSON.fast.toFixed(0)\r\n      }\r\n      return store.getStore('universalGasPrice')\r\n    } catch(e) {\r\n      console.log(e)\r\n      return store.getStore('universalGasPrice')\r\n    }\r\n  }\r\n\r\n  _getWeb3Provider = async () => {\r\n    const web3context = store.getStore('web3context')\r\n    if(!web3context) {\r\n      return null\r\n    }\r\n    const provider = web3context.library.provider\r\n    if(!provider) {\r\n      return null\r\n    }\r\n\r\n    const web3 = new Web3(provider);\r\n\r\n    // const web3 = createAlchemyWeb3(config.infuraProvider, { writeProvider: provider });\r\n\r\n    return web3\r\n  }\r\n\r\n  getWeightOfBalances = async (payload) => {\r\n    const account = store.getStore('account')\r\n\r\n    const assets = store.getStore('assets')\r\n\r\n    if(!account || !account.address) {\r\n      return false\r\n    }\r\n\r\n    const web3 = await this._getWeb3Provider();\r\n\r\n\r\n  }\r\n\r\n  getloadTokenList = async (payload) => {\r\n    const account = store.getStore('account')\r\n    // console.log(account)\r\n    // const { asset, amount } = payload.content\r\n    const url = \"https://wispy-bird-88a7.uniswap.workers.dev/?url=http://tokens.1inch.eth.link\"\r\n    const res = await rp(url);\r\n    const jsonRes = await JSON.parse(res)\r\n    var tokens = Array.from(jsonRes.tokens)\r\n    var tokens = tokens.map(item => {\r\n      const container = {}\r\n      container.address = item.address\r\n      container.decimals = item.decimals\r\n      container.symbol = item.symbol\r\n      container.iconUrl = item.logoURI\r\n      // container.balance = this._getERC20Balance(item, account)\r\n      return container\r\n    })\r\n    // console.log(tokens)\r\n    var eth = {\r\n      address: \"0x0000000000000000000000000000000000000000\",\r\n      symbol: \"ETH\",\r\n      decimals: 18,\r\n      iconUrl: \"src/assets/eth.png\"\r\n    }\r\n    tokens.push(eth)\r\n    let dashboard = {\r\n      tokenList: tokens\r\n    }\r\n    store.setStore({ dashboard: dashboard })\r\n    emitter.emit(TOEKEN_DASHBOARD_SNAPSHOT_RETURNED, dashboard)\r\n    // console.log(store.getStore('dashboard'))\r\n  }\r\n\r\n  getDashboardSnapshot = (payload) => {\r\n    this.getloadTokenList(payload)\r\n  }\r\n}\r\n\r\nvar store = new Store();\r\n\r\nexport default {\r\n  store: store,\r\n  dispatcher: dispatcher,\r\n  emitter: emitter\r\n};\r\n"]},"metadata":{},"sourceType":"module"}