{"ast":null,"code":"'use strict';\n\nvar abi = require('ethjs-abi'); // eslint-disable-line\n\n\nvar keccak256 = require('js-sha3').keccak_256; // eslint-disable-line\n\n\nvar EthFilter = require('ethjs-filter'); // eslint-disable-line\n\n\nvar getKeys = require('ethjs-util').getKeys; // eslint-disable-line\n\n\nvar arrayContainsArray = require('ethjs-util').arrayContainsArray;\n\nfunction hasTransactionObject(args) {\n  var txObjectProperties = ['from', 'to', 'data', 'value', 'gasPrice', 'gas'];\n\n  if (typeof args === 'object' && Array.isArray(args) === true && args.length > 0) {\n    if (typeof args[args.length - 1] === 'object' && (Object.keys(args[args.length - 1]).length === 0 || arrayContainsArray(Object.keys(args[args.length - 1]), txObjectProperties, true))) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getConstructorFromABI(contractABI) {\n  return contractABI.filter(function (json) {\n    return json.type === 'constructor';\n  })[0];\n}\n\nfunction getCallableMethodsFromABI(contractABI) {\n  return contractABI.filter(function (json) {\n    return (json.type === 'function' || json.type === 'event') && json.name.length > 0;\n  });\n}\n\nfunction contractFactory(query) {\n  return function ContractFactory(contractABI, contractBytecode, contractDefaultTxObject) {\n    if (!Array.isArray(contractABI)) {\n      throw new Error('[ethjs-contract] Contract ABI must be type Array, got type ' + typeof contractABI);\n    }\n\n    if (typeof contractBytecode !== 'undefined' && typeof contractBytecode !== 'string') {\n      throw new Error('[ethjs-contract] Contract bytecode must be type String, got type ' + typeof contractBytecode);\n    }\n\n    if (typeof contractDefaultTxObject !== 'undefined' && typeof contractDefaultTxObject !== 'object') {\n      throw new Error('[ethjs-contract] Contract default tx object must be type Object, got type ' + typeof contractABI);\n    }\n\n    var output = {};\n\n    output.at = function atContract(address) {\n      function Contract() {\n        var self = this;\n        self.abi = contractABI || [];\n        self.query = query;\n        self.address = address || '0x';\n        self.bytecode = contractBytecode || '0x';\n        self.defaultTxObject = contractDefaultTxObject || {};\n        self.filters = new EthFilter(query);\n        getCallableMethodsFromABI(contractABI).forEach(function (methodObject) {\n          self[methodObject.name] = function contractMethod() {\n            // eslint-disable-line\n            var queryMethod = 'call'; // eslint-disable-line\n\n            var providedTxObject = {}; // eslint-disable-line\n\n            var methodCallback = function methodCallback() {}; // eslint-disable-line\n\n\n            var methodArgs = [].slice.call(arguments); // eslint-disable-line\n\n            if (typeof methodArgs[methodArgs.length - 1] === 'function') {\n              methodCallback = methodArgs.pop();\n            }\n\n            if (methodObject.type === 'function') {\n              return new Promise(function (resolve, reject) {\n                function newMethodCallback(callbackError, callbackResult) {\n                  if (queryMethod === 'call' && !callbackError) {\n                    try {\n                      var decodedMethodResult = abi.decodeMethod(methodObject, callbackResult);\n                      resolve(decodedMethodResult);\n                      methodCallback(null, decodedMethodResult);\n                    } catch (decodeFormattingError) {\n                      var decodingError = new Error('[ethjs-contract] while formatting incoming raw call data ' + JSON.stringify(callbackResult) + ' ' + decodeFormattingError);\n                      reject(decodingError);\n                      methodCallback(decodingError, null);\n                    }\n                  } else if (queryMethod === 'sendTransaction' && !callbackError) {\n                    resolve(callbackResult);\n                    methodCallback(null, callbackResult);\n                  } else {\n                    reject(callbackError);\n                    methodCallback(callbackError, null);\n                  }\n                }\n\n                if (hasTransactionObject(methodArgs)) providedTxObject = methodArgs.pop();\n                var methodTxObject = Object.assign({}, self.defaultTxObject, providedTxObject, {\n                  to: self.address\n                });\n                methodTxObject.data = abi.encodeMethod(methodObject, methodArgs);\n\n                if (methodObject.constant === false) {\n                  queryMethod = 'sendTransaction';\n                }\n\n                query[queryMethod](methodTxObject, newMethodCallback);\n              });\n            } else if (methodObject.type === 'event') {\n              var _ret = function () {\n                var filterInputTypes = getKeys(methodObject.inputs, 'type', false);\n                var filterTopic = '0x' + keccak256(methodObject.name + '(' + filterInputTypes.join(',') + ')');\n                var filterTopcis = [filterTopic];\n                var argsObject = Object.assign({}, methodArgs[0]) || {};\n                return {\n                  v: new self.filters.Filter(Object.assign({}, argsObject, {\n                    decoder: function decoder(logData) {\n                      return abi.decodeEvent(methodObject, logData, filterTopcis);\n                    },\n                    defaultFilterObject: Object.assign({}, methodArgs[0] || {}, {\n                      to: self.address,\n                      topics: filterTopcis\n                    })\n                  }))\n                };\n              }();\n\n              if (typeof _ret === \"object\") return _ret.v;\n            }\n          };\n        });\n      }\n\n      return new Contract();\n    };\n\n    output['new'] = function newContract() {\n      var providedTxObject = {}; // eslint-disable-line\n\n      var newMethodCallback = function newMethodCallback() {}; // eslint-disable-line\n\n\n      var newMethodArgs = [].slice.call(arguments); // eslint-disable-line\n\n      if (typeof newMethodArgs[newMethodArgs.length - 1] === 'function') newMethodCallback = newMethodArgs.pop();\n      if (hasTransactionObject(newMethodArgs)) providedTxObject = newMethodArgs.pop();\n      var constructMethod = getConstructorFromABI(contractABI);\n      var assembleTxObject = Object.assign({}, contractDefaultTxObject, providedTxObject); // if contract bytecode was predefined\n\n      if (contractBytecode) {\n        assembleTxObject.data = contractBytecode;\n      } // if constructor bytecode\n\n\n      if (constructMethod) {\n        var constructBytecode = abi.encodeParams(getKeys(constructMethod.inputs, 'type'), newMethodArgs).substring(2); // eslint-disable-line\n\n        assembleTxObject.data = '' + assembleTxObject.data + constructBytecode;\n      }\n\n      return query.sendTransaction(assembleTxObject, newMethodCallback);\n    };\n\n    return output;\n  };\n}\n\nfunction EthContract(query) {\n  return contractFactory(query);\n}\n\nmodule.exports = EthContract;","map":{"version":3,"sources":["F:/7color/node_modules/ethjs-contract/lib/index.js"],"names":["abi","require","keccak256","keccak_256","EthFilter","getKeys","arrayContainsArray","hasTransactionObject","args","txObjectProperties","Array","isArray","length","Object","keys","getConstructorFromABI","contractABI","filter","json","type","getCallableMethodsFromABI","name","contractFactory","query","ContractFactory","contractBytecode","contractDefaultTxObject","Error","output","at","atContract","address","Contract","self","bytecode","defaultTxObject","filters","forEach","methodObject","contractMethod","queryMethod","providedTxObject","methodCallback","methodArgs","slice","call","arguments","pop","Promise","resolve","reject","newMethodCallback","callbackError","callbackResult","decodedMethodResult","decodeMethod","decodeFormattingError","decodingError","JSON","stringify","methodTxObject","assign","to","data","encodeMethod","constant","_ret","filterInputTypes","inputs","filterTopic","join","filterTopcis","argsObject","v","Filter","decoder","logData","decodeEvent","defaultFilterObject","topics","newContract","newMethodArgs","constructMethod","assembleTxObject","constructBytecode","encodeParams","substring","sendTransaction","EthContract","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar abi = require('ethjs-abi'); // eslint-disable-line\r\nvar keccak256 = require('js-sha3').keccak_256; // eslint-disable-line\r\nvar EthFilter = require('ethjs-filter'); // eslint-disable-line\r\nvar getKeys = require('ethjs-util').getKeys; // eslint-disable-line\r\nvar arrayContainsArray = require('ethjs-util').arrayContainsArray;\r\n\r\nfunction hasTransactionObject(args) {\r\n  var txObjectProperties = ['from', 'to', 'data', 'value', 'gasPrice', 'gas'];\r\n  if (typeof args === 'object' && Array.isArray(args) === true && args.length > 0) {\r\n    if (typeof args[args.length - 1] === 'object' && (Object.keys(args[args.length - 1]).length === 0 || arrayContainsArray(Object.keys(args[args.length - 1]), txObjectProperties, true))) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction getConstructorFromABI(contractABI) {\r\n  return contractABI.filter(function (json) {\r\n    return json.type === 'constructor';\r\n  })[0];\r\n}\r\n\r\nfunction getCallableMethodsFromABI(contractABI) {\r\n  return contractABI.filter(function (json) {\r\n    return (json.type === 'function' || json.type === 'event') && json.name.length > 0;\r\n  });\r\n}\r\n\r\nfunction contractFactory(query) {\r\n  return function ContractFactory(contractABI, contractBytecode, contractDefaultTxObject) {\r\n    if (!Array.isArray(contractABI)) {\r\n      throw new Error('[ethjs-contract] Contract ABI must be type Array, got type ' + typeof contractABI);\r\n    }\r\n    if (typeof contractBytecode !== 'undefined' && typeof contractBytecode !== 'string') {\r\n      throw new Error('[ethjs-contract] Contract bytecode must be type String, got type ' + typeof contractBytecode);\r\n    }\r\n    if (typeof contractDefaultTxObject !== 'undefined' && typeof contractDefaultTxObject !== 'object') {\r\n      throw new Error('[ethjs-contract] Contract default tx object must be type Object, got type ' + typeof contractABI);\r\n    }\r\n\r\n    var output = {};\r\n    output.at = function atContract(address) {\r\n      function Contract() {\r\n        var self = this;\r\n        self.abi = contractABI || [];\r\n        self.query = query;\r\n        self.address = address || '0x';\r\n        self.bytecode = contractBytecode || '0x';\r\n        self.defaultTxObject = contractDefaultTxObject || {};\r\n        self.filters = new EthFilter(query);\r\n\r\n        getCallableMethodsFromABI(contractABI).forEach(function (methodObject) {\r\n          self[methodObject.name] = function contractMethod() {\r\n            // eslint-disable-line\r\n            var queryMethod = 'call'; // eslint-disable-line\r\n            var providedTxObject = {}; // eslint-disable-line\r\n            var methodCallback = function methodCallback() {}; // eslint-disable-line\r\n            var methodArgs = [].slice.call(arguments); // eslint-disable-line\r\n            if (typeof methodArgs[methodArgs.length - 1] === 'function') {\r\n              methodCallback = methodArgs.pop();\r\n            }\r\n\r\n            if (methodObject.type === 'function') {\r\n              return new Promise(function (resolve, reject) {\r\n                function newMethodCallback(callbackError, callbackResult) {\r\n                  if (queryMethod === 'call' && !callbackError) {\r\n                    try {\r\n                      var decodedMethodResult = abi.decodeMethod(methodObject, callbackResult);\r\n\r\n                      resolve(decodedMethodResult);\r\n                      methodCallback(null, decodedMethodResult);\r\n                    } catch (decodeFormattingError) {\r\n                      var decodingError = new Error('[ethjs-contract] while formatting incoming raw call data ' + JSON.stringify(callbackResult) + ' ' + decodeFormattingError);\r\n\r\n                      reject(decodingError);\r\n                      methodCallback(decodingError, null);\r\n                    }\r\n                  } else if (queryMethod === 'sendTransaction' && !callbackError) {\r\n                    resolve(callbackResult);\r\n                    methodCallback(null, callbackResult);\r\n                  } else {\r\n                    reject(callbackError);\r\n                    methodCallback(callbackError, null);\r\n                  }\r\n                }\r\n\r\n                if (hasTransactionObject(methodArgs)) providedTxObject = methodArgs.pop();\r\n                var methodTxObject = Object.assign({}, self.defaultTxObject, providedTxObject, {\r\n                  to: self.address\r\n                });\r\n                methodTxObject.data = abi.encodeMethod(methodObject, methodArgs);\r\n\r\n                if (methodObject.constant === false) {\r\n                  queryMethod = 'sendTransaction';\r\n                }\r\n\r\n                query[queryMethod](methodTxObject, newMethodCallback);\r\n              });\r\n            } else if (methodObject.type === 'event') {\r\n              var _ret = function () {\r\n                var filterInputTypes = getKeys(methodObject.inputs, 'type', false);\r\n                var filterTopic = '0x' + keccak256(methodObject.name + '(' + filterInputTypes.join(',') + ')');\r\n                var filterTopcis = [filterTopic];\r\n                var argsObject = Object.assign({}, methodArgs[0]) || {};\r\n\r\n                return {\r\n                  v: new self.filters.Filter(Object.assign({}, argsObject, {\r\n                    decoder: function decoder(logData) {\r\n                      return abi.decodeEvent(methodObject, logData, filterTopcis);\r\n                    },\r\n                    defaultFilterObject: Object.assign({}, methodArgs[0] || {}, {\r\n                      to: self.address,\r\n                      topics: filterTopcis\r\n                    })\r\n                  }))\r\n                };\r\n              }();\r\n\r\n              if (typeof _ret === \"object\") return _ret.v;\r\n            }\r\n          };\r\n        });\r\n      }\r\n\r\n      return new Contract();\r\n    };\r\n\r\n    output['new'] = function newContract() {\r\n      var providedTxObject = {}; // eslint-disable-line\r\n      var newMethodCallback = function newMethodCallback() {}; // eslint-disable-line\r\n      var newMethodArgs = [].slice.call(arguments); // eslint-disable-line\r\n      if (typeof newMethodArgs[newMethodArgs.length - 1] === 'function') newMethodCallback = newMethodArgs.pop();\r\n      if (hasTransactionObject(newMethodArgs)) providedTxObject = newMethodArgs.pop();\r\n      var constructMethod = getConstructorFromABI(contractABI);\r\n      var assembleTxObject = Object.assign({}, contractDefaultTxObject, providedTxObject);\r\n\r\n      // if contract bytecode was predefined\r\n      if (contractBytecode) {\r\n        assembleTxObject.data = contractBytecode;\r\n      }\r\n\r\n      // if constructor bytecode\r\n      if (constructMethod) {\r\n        var constructBytecode = abi.encodeParams(getKeys(constructMethod.inputs, 'type'), newMethodArgs).substring(2); // eslint-disable-line\r\n        assembleTxObject.data = '' + assembleTxObject.data + constructBytecode;\r\n      }\r\n\r\n      return query.sendTransaction(assembleTxObject, newMethodCallback);\r\n    };\r\n\r\n    return output;\r\n  };\r\n}\r\n\r\nfunction EthContract(query) {\r\n  return contractFactory(query);\r\n}\r\n\r\nmodule.exports = EthContract;"]},"metadata":{},"sourceType":"script"}