{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Prepends a subprovider to a provider\r\n * @param provider    Given provider\r\n * @param subprovider Subprovider to prepend\r\n */\n\nfunction prependSubprovider(provider, subprovider) {\n  subprovider.setEngine(provider); // HACK: We use implementation details of provider engine here\n  // https://github.com/MetaMask/provider-engine/blob/master/index.js#L68\n\n  provider._providers = __spread([subprovider], provider._providers);\n}\n\nexports.prependSubprovider = prependSubprovider;","map":{"version":3,"sources":["../../../src/utils/subprovider_utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAIG;;AACH,SAAgB,kBAAhB,CAAmC,QAAnC,EAAiE,WAAjE,EAAyF;AACrF,EAAA,WAAW,CAAC,SAAZ,CAAsB,QAAtB,EADqF,CAErF;AACA;;AACC,EAAA,QAAgB,CAAC,UAAjB,GAA2B,QAAA,CAAA,CAAI,WAAJ,CAAA,EAAqB,QAAgB,CAAC,UAAtC,CAA3B;AACJ;;AALD,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spread = (this && this.__spread) || function () {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Prepends a subprovider to a provider\r\n * @param provider    Given provider\r\n * @param subprovider Subprovider to prepend\r\n */\r\nfunction prependSubprovider(provider, subprovider) {\r\n    subprovider.setEngine(provider);\r\n    // HACK: We use implementation details of provider engine here\r\n    // https://github.com/MetaMask/provider-engine/blob/master/index.js#L68\r\n    provider._providers = __spread([subprovider], provider._providers);\r\n}\r\nexports.prependSubprovider = prependSubprovider;\r\n//# sourceMappingURL=subprovider_utils.js.map"]},"metadata":{},"sourceType":"script"}