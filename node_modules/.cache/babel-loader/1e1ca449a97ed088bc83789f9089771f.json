{"ast":null,"code":"'use strict';\n\nvar format = require('ethjs-format');\n\nvar EthRPC = require('ethjs-rpc');\n\nmodule.exports = Eth;\n\nfunction Eth(provider, options) {\n  var self = this;\n  var optionsObject = options || {};\n\n  if (!(this instanceof Eth)) {\n    throw new Error('[ethjs-query] the Eth object requires the \"new\" flag in order to function normally (i.e. `const eth = new Eth(provider);`).');\n  }\n\n  if (typeof provider !== 'object') {\n    throw new Error('[ethjs-query] the Eth object requires that the first input \\'provider\\' must be an object, got \\'' + typeof provider + '\\' (i.e. \\'const eth = new Eth(provider);\\')');\n  }\n\n  self.options = Object.assign({\n    debug: optionsObject.debug || false,\n    logger: optionsObject.logger || console,\n    jsonSpace: optionsObject.jsonSpace || 0\n  });\n  self.rpc = new EthRPC(provider);\n  self.setProvider = self.rpc.setProvider;\n}\n\nEth.prototype.log = function log(message) {\n  var self = this;\n  if (self.options.debug) self.options.logger.log('[ethjs-query log] ' + message);\n};\n\nObject.keys(format.schema.methods).forEach(function (rpcMethodName) {\n  Object.defineProperty(Eth.prototype, rpcMethodName.replace('eth_', ''), {\n    enumerable: true,\n    value: generateFnFor(rpcMethodName, format.schema.methods[rpcMethodName])\n  });\n});\n\nfunction generateFnFor(method, methodObject) {\n  return function outputMethod() {\n    var protoCallback = function protoCallback() {}; // eslint-disable-line\n\n\n    var inputs = null; // eslint-disable-line\n\n    var inputError = null; // eslint-disable-line\n\n    var self = this;\n    var args = [].slice.call(arguments); // eslint-disable-line\n\n    var protoMethod = method.replace('eth_', ''); // eslint-disable-line\n\n    if (args.length > 0 && typeof args[args.length - 1] === 'function') {\n      protoCallback = args.pop();\n    }\n\n    return new Promise(function (resolve, reject) {\n      var cb = function cb(callbackError, callbackResult) {\n        if (callbackError) {\n          reject(callbackError);\n          protoCallback(callbackError, null);\n        } else {\n          try {\n            self.log('attempting method formatting for \\'' + protoMethod + '\\' with raw outputs: ' + JSON.stringify(callbackResult, null, self.options.jsonSpace));\n            var methodOutputs = format.formatOutputs(method, callbackResult);\n            self.log('method formatting success for \\'' + protoMethod + '\\' formatted result: ' + JSON.stringify(methodOutputs, null, self.options.jsonSpace));\n            resolve(methodOutputs);\n            protoCallback(null, methodOutputs);\n          } catch (outputFormattingError) {\n            var outputError = new Error('[ethjs-query] while formatting outputs from RPC \\'' + JSON.stringify(callbackResult, null, self.options.jsonSpace) + '\\' for method \\'' + protoMethod + '\\' ' + outputFormattingError);\n            reject(outputError);\n            protoCallback(outputError, null);\n          }\n        }\n      };\n\n      if (args.length < methodObject[2]) {\n        return cb(new Error('[ethjs-query] method \\'' + protoMethod + '\\' requires at least ' + methodObject[2] + ' input (format type ' + methodObject[0][0] + '), ' + args.length + ' provided. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + method.toLowerCase()));\n      }\n\n      if (args.length > methodObject[0].length) {\n        return cb(new Error('[ethjs-query] method \\'' + protoMethod + '\\' requires at most ' + methodObject[0].length + ' params, ' + args.length + ' provided \\'' + JSON.stringify(args, null, self.options.jsonSpace) + '\\'. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + method.toLowerCase()));\n      }\n\n      if (methodObject[3] && args.length < methodObject[3]) {\n        args.push('latest');\n      }\n\n      self.log('attempting method formatting for \\'' + protoMethod + '\\' with inputs ' + JSON.stringify(args, null, self.options.jsonSpace));\n\n      try {\n        inputs = format.formatInputs(method, args);\n        self.log('method formatting success for \\'' + protoMethod + '\\' with formatted result: ' + JSON.stringify(inputs, null, self.options.jsonSpace));\n      } catch (formattingError) {\n        return cb(new Error('[ethjs-query] while formatting inputs \\'' + JSON.stringify(args, null, self.options.jsonSpace) + '\\' for method \\'' + protoMethod + '\\' error: ' + formattingError));\n      }\n\n      return self.rpc.sendAsync({\n        method: method,\n        params: inputs\n      }, cb);\n    });\n  };\n}","map":{"version":3,"sources":["D:/proj/7color/node_modules/ethjs-query/lib/index.js"],"names":["format","require","EthRPC","module","exports","Eth","provider","options","self","optionsObject","Error","Object","assign","debug","logger","console","jsonSpace","rpc","setProvider","prototype","log","message","keys","schema","methods","forEach","rpcMethodName","defineProperty","replace","enumerable","value","generateFnFor","method","methodObject","outputMethod","protoCallback","inputs","inputError","args","slice","call","arguments","protoMethod","length","pop","Promise","resolve","reject","cb","callbackError","callbackResult","JSON","stringify","methodOutputs","formatOutputs","outputFormattingError","outputError","toLowerCase","push","formatInputs","formattingError","sendAsync","params"],"mappings":"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","sourcesContent":["'use strict';\n\nvar format = require('ethjs-format');\nvar EthRPC = require('ethjs-rpc');\n\nmodule.exports = Eth;\n\nfunction Eth(provider, options) {\n  var self = this;\n  var optionsObject = options || {};\n\n  if (!(this instanceof Eth)) {\n    throw new Error('[ethjs-query] the Eth object requires the \"new\" flag in order to function normally (i.e. `const eth = new Eth(provider);`).');\n  }\n  if (typeof provider !== 'object') {\n    throw new Error('[ethjs-query] the Eth object requires that the first input \\'provider\\' must be an object, got \\'' + typeof provider + '\\' (i.e. \\'const eth = new Eth(provider);\\')');\n  }\n\n  self.options = Object.assign({\n    debug: optionsObject.debug || false,\n    logger: optionsObject.logger || console,\n    jsonSpace: optionsObject.jsonSpace || 0\n  });\n  self.rpc = new EthRPC(provider);\n  self.setProvider = self.rpc.setProvider;\n}\n\nEth.prototype.log = function log(message) {\n  var self = this;\n  if (self.options.debug) self.options.logger.log('[ethjs-query log] ' + message);\n};\n\nObject.keys(format.schema.methods).forEach(function (rpcMethodName) {\n  Object.defineProperty(Eth.prototype, rpcMethodName.replace('eth_', ''), {\n    enumerable: true,\n    value: generateFnFor(rpcMethodName, format.schema.methods[rpcMethodName])\n  });\n});\n\nfunction generateFnFor(method, methodObject) {\n  return function outputMethod() {\n    var protoCallback = function protoCallback() {}; // eslint-disable-line\n    var inputs = null; // eslint-disable-line\n    var inputError = null; // eslint-disable-line\n    var self = this;\n    var args = [].slice.call(arguments); // eslint-disable-line\n    var protoMethod = method.replace('eth_', ''); // eslint-disable-line\n\n    if (args.length > 0 && typeof args[args.length - 1] === 'function') {\n      protoCallback = args.pop();\n    }\n\n    return new Promise(function (resolve, reject) {\n      var cb = function cb(callbackError, callbackResult) {\n        if (callbackError) {\n          reject(callbackError);\n          protoCallback(callbackError, null);\n        } else {\n          try {\n            self.log('attempting method formatting for \\'' + protoMethod + '\\' with raw outputs: ' + JSON.stringify(callbackResult, null, self.options.jsonSpace));\n            var methodOutputs = format.formatOutputs(method, callbackResult);\n            self.log('method formatting success for \\'' + protoMethod + '\\' formatted result: ' + JSON.stringify(methodOutputs, null, self.options.jsonSpace));\n\n            resolve(methodOutputs);\n            protoCallback(null, methodOutputs);\n          } catch (outputFormattingError) {\n            var outputError = new Error('[ethjs-query] while formatting outputs from RPC \\'' + JSON.stringify(callbackResult, null, self.options.jsonSpace) + '\\' for method \\'' + protoMethod + '\\' ' + outputFormattingError);\n\n            reject(outputError);\n            protoCallback(outputError, null);\n          }\n        }\n      };\n\n      if (args.length < methodObject[2]) {\n        return cb(new Error('[ethjs-query] method \\'' + protoMethod + '\\' requires at least ' + methodObject[2] + ' input (format type ' + methodObject[0][0] + '), ' + args.length + ' provided. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + method.toLowerCase()));\n      }\n\n      if (args.length > methodObject[0].length) {\n        return cb(new Error('[ethjs-query] method \\'' + protoMethod + '\\' requires at most ' + methodObject[0].length + ' params, ' + args.length + ' provided \\'' + JSON.stringify(args, null, self.options.jsonSpace) + '\\'. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + method.toLowerCase()));\n      }\n\n      if (methodObject[3] && args.length < methodObject[3]) {\n        args.push('latest');\n      }\n\n      self.log('attempting method formatting for \\'' + protoMethod + '\\' with inputs ' + JSON.stringify(args, null, self.options.jsonSpace));\n\n      try {\n        inputs = format.formatInputs(method, args);\n        self.log('method formatting success for \\'' + protoMethod + '\\' with formatted result: ' + JSON.stringify(inputs, null, self.options.jsonSpace));\n      } catch (formattingError) {\n        return cb(new Error('[ethjs-query] while formatting inputs \\'' + JSON.stringify(args, null, self.options.jsonSpace) + '\\' for method \\'' + protoMethod + '\\' error: ' + formattingError));\n      }\n\n      return self.rpc.sendAsync({ method: method, params: inputs }, cb);\n    });\n  };\n}"]},"metadata":{},"sourceType":"script"}