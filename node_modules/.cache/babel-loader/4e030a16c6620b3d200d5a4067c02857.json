{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar _this = this;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isNode = require(\"detect-node\");\n\nrequire(\"isomorphic-fetch\"); // WARNING: This needs to be imported after isomorphic-fetch: https://github.com/mo/abortcontroller-polyfill#using-it-on-browsers-without-fetch\n// tslint:disable-next-line:ordered-imports\n\n\nrequire(\"abortcontroller-polyfill/dist/abortcontroller-polyfill-only\");\n\nexports.fetchAsync = function (endpoint, options, timeoutMs) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (timeoutMs === void 0) {\n    timeoutMs = 20000;\n  }\n\n  return __awaiter(_this, void 0, void 0, function () {\n    var optionsWithAbortParam, controller_1, signal, response;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options.signal || options.timeout) {\n            throw new Error('Cannot call fetchAsync with options.signal or options.timeout. To set a timeout, please use the supplied \"timeoutMs\" parameter.');\n          }\n\n          if (!isNode) {\n            controller_1 = new AbortController();\n            signal = controller_1.signal;\n            setTimeout(function () {\n              controller_1.abort();\n            }, timeoutMs);\n            optionsWithAbortParam = __assign({\n              signal: signal\n            }, options);\n          } else {\n            // HACK: the `timeout` param only exists in `node-fetch`, and not on the `isomorphic-fetch`\n            // `RequestInit` type. Since `isomorphic-fetch` conditionally wraps `node-fetch` when the\n            // execution environment is `Node.js`, we need to cast it to `any` in that scenario.\n            optionsWithAbortParam = __assign({\n              timeout: timeoutMs\n            }, options);\n          }\n\n          return [4\n          /*yield*/\n          , fetch(endpoint, optionsWithAbortParam)];\n\n        case 1:\n          response = _a.sent();\n          return [2\n          /*return*/\n          , response];\n      }\n    });\n  });\n};","map":{"version":3,"sources":["../../src/fetch_async.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,IAAA;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,OAAA,CAAA,kBAAA,CAAA,C,CACA;AACA;;;AACA,OAAA,CAAA,6DAAA,CAAA;;AAEa,OAAA,CAAA,UAAA,GAAa,UACtB,QADsB,EAEtB,OAFsB,EAGtB,SAHsB,EAGG;AADzB,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAyB;;AACzB,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,KAAA;AAAyB;;;;;;;AAEzB,cAAI,OAAO,CAAC,MAAR,IAAmB,OAAe,CAAC,OAAvC,EAAgD;AAC5C,kBAAM,IAAI,KAAJ,CACF,iIADE,CAAN;AAGH;;AAED,cAAI,CAAC,MAAL,EAAa;AACH,YAAA,YAAA,GAAa,IAAI,eAAJ,EAAb;AACA,YAAA,MAAM,GAAG,YAAU,CAAC,MAApB;AACN,YAAA,UAAU,CAAC,YAAA;AACP,cAAA,YAAU,CAAC,KAAX;AACH,aAFS,EAEP,SAFO,CAAV;AAGA,YAAA,qBAAqB,GAAA,QAAA,CAAA;AACjB,cAAA,MAAM,EAAA;AADW,aAAA,EAEd,OAFc,CAArB;AAIH,WAVD,MAUO;AACH;AACA;AACA;AACA,YAAA,qBAAqB,GAAG,QAAA,CAAA;AACpB,cAAA,OAAO,EAAE;AADW,aAAA,EAEjB,OAFiB,CAAxB;AAIH;;AAEgB,iBAAA,CAAA;AAAA;AAAA,YAAM,KAAK,CAAC,QAAD,EAAW,qBAAX,CAAX,CAAA;;;AAAX,UAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACN,iBAAA,CAAA;AAAA;AAAA,YAAO,QAAP,CAAA;;;;AACH,CAjCY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar _this = this;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar isNode = require(\"detect-node\");\r\nrequire(\"isomorphic-fetch\");\r\n// WARNING: This needs to be imported after isomorphic-fetch: https://github.com/mo/abortcontroller-polyfill#using-it-on-browsers-without-fetch\r\n// tslint:disable-next-line:ordered-imports\r\nrequire(\"abortcontroller-polyfill/dist/abortcontroller-polyfill-only\");\r\nexports.fetchAsync = function (endpoint, options, timeoutMs) {\r\n    if (options === void 0) { options = {}; }\r\n    if (timeoutMs === void 0) { timeoutMs = 20000; }\r\n    return __awaiter(_this, void 0, void 0, function () {\r\n        var optionsWithAbortParam, controller_1, signal, response;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (options.signal || options.timeout) {\r\n                        throw new Error('Cannot call fetchAsync with options.signal or options.timeout. To set a timeout, please use the supplied \"timeoutMs\" parameter.');\r\n                    }\r\n                    if (!isNode) {\r\n                        controller_1 = new AbortController();\r\n                        signal = controller_1.signal;\r\n                        setTimeout(function () {\r\n                            controller_1.abort();\r\n                        }, timeoutMs);\r\n                        optionsWithAbortParam = __assign({ signal: signal }, options);\r\n                    }\r\n                    else {\r\n                        // HACK: the `timeout` param only exists in `node-fetch`, and not on the `isomorphic-fetch`\r\n                        // `RequestInit` type. Since `isomorphic-fetch` conditionally wraps `node-fetch` when the\r\n                        // execution environment is `Node.js`, we need to cast it to `any` in that scenario.\r\n                        optionsWithAbortParam = __assign({ timeout: timeoutMs }, options);\r\n                    }\r\n                    return [4 /*yield*/, fetch(endpoint, optionsWithAbortParam)];\r\n                case 1:\r\n                    response = _a.sent();\r\n                    return [2 /*return*/, response];\r\n            }\r\n        });\r\n    });\r\n};\r\n//# sourceMappingURL=fetch_async.js.map"]},"metadata":{},"sourceType":"script"}