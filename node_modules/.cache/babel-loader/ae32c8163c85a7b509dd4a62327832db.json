{"ast":null,"code":"'use strict';\n\nmodule.exports = EthRPC;\n/**\n * Constructs the EthRPC instance\n *\n * @method EthRPC\n * @param {Object} cprovider the eth rpc provider web3 standard..\n * @param {Object} options the options, if any\n * @returns {Object} ethrpc instance\n */\n\nfunction EthRPC(cprovider, options) {\n  var self = this;\n  var optionsObject = options || {};\n\n  if (!(this instanceof EthRPC)) {\n    throw new Error('[ethjs-rpc] the EthRPC object requires the \"new\" flag in order to function normally (i.e. `const eth = new EthRPC(provider);`).');\n  }\n\n  self.options = Object.assign({\n    jsonSpace: optionsObject.jsonSpace || 0,\n    max: optionsObject.max || 9999999999999\n  });\n  self.idCounter = Math.floor(Math.random() * self.options.max);\n\n  self.setProvider = function (provider) {\n    if (typeof provider !== 'object') {\n      throw new Error('[ethjs-rpc] the EthRPC object requires that the first input \\'provider\\' must be an object, got \\'' + typeof provider + '\\' (i.e. \\'const eth = new EthRPC(provider);\\')');\n    }\n\n    self.currentProvider = provider;\n  };\n\n  self.setProvider(cprovider);\n}\n/**\n * The main send async method\n *\n * @method sendAsync\n * @param {Object} payload the rpc payload object\n * @param {Function} cb the async standard callback\n * @callback {Object|Array|Boolean|String} vary result instance output\n */\n\n\nEthRPC.prototype.sendAsync = function sendAsync(payload, cb) {\n  var self = this;\n  self.idCounter = self.idCounter % self.options.max;\n  var parsedPayload = createPayload(payload, self.idCounter++);\n  self.currentProvider.sendAsync(parsedPayload, function (err, response) {\n    var responseObject = response || {};\n\n    if (err || responseObject.error) {\n      var payloadErrorMessage = '[ethjs-rpc] ' + (responseObject.error && 'rpc' || '') + ' error with payload ' + JSON.stringify(parsedPayload, null, self.options.jsonSpace) + ' ' + (String(err) || JSON.stringify(responseObject.error, null, self.options.jsonSpace));\n      var payloadError = new Error(payloadErrorMessage);\n      payloadError.value = err || responseObject.error;\n      return cb(payloadError, null);\n    }\n\n    return cb(null, responseObject.result);\n  });\n};\n/**\n * A simple create payload method\n *\n * @method createPayload\n * @param {Object} data the rpc payload data\n * @param {String} id the rpc data payload ID\n * @returns {Object} payload the completed payload object\n */\n\n\nfunction createPayload(data, id) {\n  return Object.assign({}, {\n    id: id,\n    jsonrpc: '2.0',\n    params: []\n  }, data);\n}","map":{"version":3,"sources":["D:/proj/7color/node_modules/ethjs-rpc/lib/index.js"],"names":["module","exports","EthRPC","cprovider","options","self","optionsObject","Error","Object","assign","jsonSpace","max","idCounter","Math","floor","random","setProvider","provider","currentProvider","prototype","sendAsync","payload","cb","parsedPayload","createPayload","err","response","responseObject","error","payloadErrorMessage","JSON","stringify","String","payloadError","value","result","data","id","jsonrpc","params"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = EthRPC;\n\n/**\n * Constructs the EthRPC instance\n *\n * @method EthRPC\n * @param {Object} cprovider the eth rpc provider web3 standard..\n * @param {Object} options the options, if any\n * @returns {Object} ethrpc instance\n */\nfunction EthRPC(cprovider, options) {\n  var self = this;\n  var optionsObject = options || {};\n\n  if (!(this instanceof EthRPC)) {\n    throw new Error('[ethjs-rpc] the EthRPC object requires the \"new\" flag in order to function normally (i.e. `const eth = new EthRPC(provider);`).');\n  }\n\n  self.options = Object.assign({\n    jsonSpace: optionsObject.jsonSpace || 0,\n    max: optionsObject.max || 9999999999999\n  });\n  self.idCounter = Math.floor(Math.random() * self.options.max);\n  self.setProvider = function (provider) {\n    if (typeof provider !== 'object') {\n      throw new Error('[ethjs-rpc] the EthRPC object requires that the first input \\'provider\\' must be an object, got \\'' + typeof provider + '\\' (i.e. \\'const eth = new EthRPC(provider);\\')');\n    }\n\n    self.currentProvider = provider;\n  };\n  self.setProvider(cprovider);\n}\n\n/**\n * The main send async method\n *\n * @method sendAsync\n * @param {Object} payload the rpc payload object\n * @param {Function} cb the async standard callback\n * @callback {Object|Array|Boolean|String} vary result instance output\n */\nEthRPC.prototype.sendAsync = function sendAsync(payload, cb) {\n  var self = this;\n  self.idCounter = self.idCounter % self.options.max;\n  var parsedPayload = createPayload(payload, self.idCounter++);\n  self.currentProvider.sendAsync(parsedPayload, function (err, response) {\n    var responseObject = response || {};\n\n    if (err || responseObject.error) {\n      var payloadErrorMessage = '[ethjs-rpc] ' + (responseObject.error && 'rpc' || '') + ' error with payload ' + JSON.stringify(parsedPayload, null, self.options.jsonSpace) + ' ' + (String(err) || JSON.stringify(responseObject.error, null, self.options.jsonSpace));\n      var payloadError = new Error(payloadErrorMessage);\n      payloadError.value = err || responseObject.error;\n      return cb(payloadError, null);\n    }\n\n    return cb(null, responseObject.result);\n  });\n};\n\n/**\n * A simple create payload method\n *\n * @method createPayload\n * @param {Object} data the rpc payload data\n * @param {String} id the rpc data payload ID\n * @returns {Object} payload the completed payload object\n */\nfunction createPayload(data, id) {\n  return Object.assign({}, {\n    id: id,\n    jsonrpc: '2.0',\n    params: []\n  }, data);\n}"]},"metadata":{},"sourceType":"script"}