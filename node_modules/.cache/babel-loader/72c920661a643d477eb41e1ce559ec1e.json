{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bytes_1 = require(\"@ethersproject/bytes\");\n\nvar logger_1 = require(\"@ethersproject/logger\");\n\nvar _version_1 = require(\"./_version\");\n\nvar logger = new logger_1.Logger(_version_1.version);\n\nvar shuffle_1 = require(\"./shuffle\");\n\nexports.shuffled = shuffle_1.shuffled;\nvar anyGlobal = null;\n\ntry {\n  anyGlobal = window;\n\n  if (anyGlobal == null) {\n    throw new Error(\"try next\");\n  }\n} catch (error) {\n  try {\n    anyGlobal = global;\n\n    if (anyGlobal == null) {\n      throw new Error(\"try next\");\n    }\n  } catch (error) {\n    anyGlobal = {};\n  }\n}\n\nvar crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\nif (!crypto || !crypto.getRandomValues) {\n  logger.warn(\"WARNING: Missing strong random number source\");\n  crypto = {\n    getRandomValues: function (buffer) {\n      return logger.throwError(\"no secure random source avaialble\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"crypto.getRandomValues\"\n      });\n    }\n  };\n}\n\nfunction randomBytes(length) {\n  if (length <= 0 || length > 1024 || length % 1) {\n    logger.throwArgumentError(\"invalid length\", \"length\", length);\n  }\n\n  var result = new Uint8Array(length);\n  crypto.getRandomValues(result);\n  return bytes_1.arrayify(result);\n}\n\nexports.randomBytes = randomBytes;\n;","map":{"version":3,"sources":["../src.ts/browser.ts"],"names":[],"mappings":"AAAA;;;;;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAM,MAAM,GAAG,IAAI,QAAA,CAAA,MAAJ,CAAW,UAAA,CAAA,OAAX,CAAf;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAAS,OAAA,CAAA,QAAA,GAAA,SAAA,CAAA,QAAA;AAET,IAAI,SAAS,GAAQ,IAArB;;AACA,IAAI;AACA,EAAA,SAAS,GAAI,MAAb;;AACA,MAAI,SAAS,IAAI,IAAjB,EAAuB;AAAE,UAAM,IAAI,KAAJ,CAAU,UAAV,CAAN;AAA8B;AAC1D,CAHD,CAGE,OAAO,KAAP,EAAc;AACZ,MAAI;AACA,IAAA,SAAS,GAAI,MAAb;;AACA,QAAI,SAAS,IAAI,IAAjB,EAAuB;AAAE,YAAM,IAAI,KAAJ,CAAU,UAAV,CAAN;AAA8B;AAC1D,GAHD,CAGE,OAAO,KAAP,EAAc;AACZ,IAAA,SAAS,GAAG,EAAZ;AACH;AACJ;;AAED,IAAI,MAAM,GAAQ,SAAS,CAAC,MAAV,IAAoB,SAAS,CAAC,QAAhD;;AACA,IAAI,CAAC,MAAD,IAAW,CAAC,MAAM,CAAC,eAAvB,EAAwC;AAEpC,EAAA,MAAM,CAAC,IAAP,CAAY,8CAAZ;AAEA,EAAA,MAAM,GAAG;AACL,IAAA,eAAe,EAAE,UAAS,MAAT,EAA2B;AACxC,aAAO,MAAM,CAAC,UAAP,CAAkB,mCAAlB,EAAuD,QAAA,CAAA,MAAA,CAAO,MAAP,CAAc,qBAArE,EAA4F;AAC/F,QAAA,SAAS,EAAE;AADoF,OAA5F,CAAP;AAGH;AALI,GAAT;AAOH;;AAED,SAAgB,WAAhB,CAA4B,MAA5B,EAA0C;AACtC,MAAI,MAAM,IAAI,CAAV,IAAe,MAAM,GAAG,IAAxB,IAAiC,MAAM,GAAG,CAA9C,EAAkD;AAC9C,IAAA,MAAM,CAAC,kBAAP,CAA0B,gBAA1B,EAA4C,QAA5C,EAAsD,MAAtD;AACH;;AAED,MAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAf;AACA,EAAA,MAAM,CAAC,eAAP,CAAuB,MAAvB;AACA,SAAO,OAAA,CAAA,QAAA,CAAS,MAAT,CAAP;AACH;;AARD,OAAA,CAAA,WAAA,GAAA,WAAA;AAQC","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar bytes_1 = require(\"@ethersproject/bytes\");\r\nvar logger_1 = require(\"@ethersproject/logger\");\r\nvar _version_1 = require(\"./_version\");\r\nvar logger = new logger_1.Logger(_version_1.version);\r\nvar shuffle_1 = require(\"./shuffle\");\r\nexports.shuffled = shuffle_1.shuffled;\r\nvar anyGlobal = null;\r\ntry {\r\n    anyGlobal = window;\r\n    if (anyGlobal == null) {\r\n        throw new Error(\"try next\");\r\n    }\r\n}\r\ncatch (error) {\r\n    try {\r\n        anyGlobal = global;\r\n        if (anyGlobal == null) {\r\n            throw new Error(\"try next\");\r\n        }\r\n    }\r\n    catch (error) {\r\n        anyGlobal = {};\r\n    }\r\n}\r\nvar crypto = anyGlobal.crypto || anyGlobal.msCrypto;\r\nif (!crypto || !crypto.getRandomValues) {\r\n    logger.warn(\"WARNING: Missing strong random number source\");\r\n    crypto = {\r\n        getRandomValues: function (buffer) {\r\n            return logger.throwError(\"no secure random source avaialble\", logger_1.Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"crypto.getRandomValues\"\r\n            });\r\n        }\r\n    };\r\n}\r\nfunction randomBytes(length) {\r\n    if (length <= 0 || length > 1024 || (length % 1)) {\r\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\r\n    }\r\n    var result = new Uint8Array(length);\r\n    crypto.getRandomValues(result);\r\n    return bytes_1.arrayify(result);\r\n}\r\nexports.randomBytes = randomBytes;\r\n;\r\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"script"}