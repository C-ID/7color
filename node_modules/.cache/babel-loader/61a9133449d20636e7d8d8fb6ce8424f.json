{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\n\"use strict\";\n\nconst {\n  callbackify\n} = require('util');\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar Jsonrpc = require('./jsonrpc.js');\n\nvar BatchManager = require('./batch.js');\n\nvar givenProvider = require('./givenProvider.js');\n/**\r\n * It's responsible for passing messages to providers\r\n * It's also responsible for polling the ethereum node for incoming messages\r\n * Default poll timeout is 1 second\r\n * Singleton\r\n *\r\n * @param {string|Object}provider\r\n * @param {Net.Socket} net\r\n *\r\n * @constructor\r\n */\n\n\nvar RequestManager = function RequestManager(provider, net) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider, net);\n  this.subscriptions = new Map();\n};\n\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n/**\r\n * Should be used to set provider of request manager\r\n *\r\n * @method setProvider\r\n *\r\n * @param {Object} provider\r\n * @param {net.Socket} net\r\n *\r\n * @returns void\r\n */\n\nRequestManager.prototype.setProvider = function (provider, net) {\n  var _this = this; // autodetect provider\n\n\n  if (provider && typeof provider === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.HttpProvider(provider); // WS\n    } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.WebsocketProvider(provider); // IPC\n    } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n      provider = new this.providers.IpcProvider(provider, net);\n    } else if (provider) {\n      throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n    }\n  } // reset the old one before changing, if still connected\n\n\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = provider || null; // listen to incoming notifications\n\n  if (this.provider && this.provider.on) {\n    this.provider.on('data', function data(result, deprecatedResult) {\n      result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n      // if result is a subscription, call callback for that subscription\n\n      if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\n        _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n      }\n    }); // resubscribe if the provider has reconnected\n\n    this.provider.on('connect', function connect() {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.subscription.resubscribe();\n      });\n    }); // notify all subscriptions about the error condition\n\n    this.provider.on('error', function error(error) {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.callback(error);\n      });\n    }); // notify all subscriptions about bad close conditions\n\n    this.provider.on('close', function close(event) {\n      if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n        _this.subscriptions.forEach(function (subscription) {\n          subscription.callback(errors.ConnectionCloseError(event));\n\n          _this.subscriptions.delete(subscription.subscription.id);\n        });\n\n        if (_this.provider && _this.provider.emit) {\n          _this.provider.emit('error', errors.ConnectionCloseError(event));\n        }\n      }\n\n      if (_this.provider && _this.provider.emit) {\n        _this.provider.emit('end', event);\n      }\n    }); // TODO add end, timeout??\n  }\n};\n/**\r\n * Asynchronously send request to provider.\r\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\r\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\r\n * @method send\r\n * @param {Object} data\r\n * @param {Function} callback\r\n */\n\n\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  const {\n    method,\n    params\n  } = data;\n  const jsonrpcPayload = Jsonrpc.toPayload(method, params);\n\n  const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\n\n  if (this.provider.request) {\n    const callbackRequest = callbackify(this.provider.request);\n    const requestArgs = {\n      method,\n      params\n    };\n    callbackRequest(requestArgs, callback);\n  } else if (this.provider.sendAsync) {\n    this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\n  } else if (this.provider.send) {\n    this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\n  } else {\n    throw new Error('Provider does not have a request or send method to use.');\n  }\n};\n/**\r\n * Asynchronously send batch request.\r\n * Only works if provider supports batch methods through `sendAsync` or `send`.\r\n * @method sendBatch\r\n * @param {Array} data - array of payload objects\r\n * @param {Function} callback\r\n */\n\n\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!_.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n\n    callback(null, results);\n  });\n};\n/**\r\n * Waits for notifications\r\n *\r\n * @method addSubscription\r\n * @param {Subscription} subscription         the subscription\r\n * @param {String} type         the subscription namespace (eth, personal, etc)\r\n * @param {Function} callback   the callback to call for incoming notifications\r\n */\n\n\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n  if (this.provider.on) {\n    this.subscriptions.set(subscription.id, {\n      callback: callback,\n      subscription: subscription\n    });\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n/**\r\n * Waits for notifications\r\n *\r\n * @method removeSubscription\r\n * @param {String} id           the subscription id\r\n * @param {Function} callback   fired once the subscription is removed\r\n */\n\n\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  if (this.subscriptions.has(id)) {\n    var type = this.subscriptions.get(id).subscription.options.type; // remove subscription first to avoid reentry\n\n    this.subscriptions.delete(id); // then, try to actually unsubscribe\n\n    this.send({\n      method: type + '_unsubscribe',\n      params: [id]\n    }, callback);\n    return;\n  }\n\n  if (typeof callback === 'function') {\n    // call the callback if the subscription was already removed\n    callback(null);\n  }\n};\n/**\r\n * Should be called to reset the subscriptions\r\n *\r\n * @method reset\r\n *\r\n * @returns {boolean}\r\n */\n\n\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  try {\n    var _this = this; // uninstall all subscriptions\n\n\n    if (this.subscriptions.size > 0) {\n      this.subscriptions.forEach(function (value, id) {\n        if (!keepIsSyncing || value.name !== 'syncing') _this.removeSubscription(id);\n      });\n    } //  reset notification callbacks etc.\n\n\n    if (this.provider.reset) this.provider.reset();\n    return true;\n  } catch (e) {\n    throw new Error(`Error while clearing subscriptions: ${e}`);\n  }\n};\n/**\r\n * Evaluates WS close event\r\n *\r\n * @method _isCleanClose\r\n *\r\n * @param {CloseEvent | boolean} event WS close event or exception flag\r\n *\r\n * @returns {boolean}\r\n */\n\n\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n  return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n/**\r\n * Detects Ipc close error. The node.net module emits ('close', isException)\r\n *\r\n * @method _isIpcCloseError\r\n *\r\n * @param {CloseEvent | boolean} event WS close event or exception flag\r\n *\r\n * @returns {boolean}\r\n */\n\n\nRequestManager.prototype._isIpcCloseError = function (event) {\n  return typeof event === 'boolean' && event;\n};\n/**\r\n * The jsonrpc result callback for RequestManager.send\r\n *\r\n * @method _jsonrpcResultCallback\r\n *\r\n * @param {Function} callback the callback to use\r\n * @param {Object} payload the jsonrpc payload\r\n *\r\n * @returns {Function} return callback of form (err, result)\r\n *\r\n */\n\n\nRequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {\n  return function (err, result) {\n    if (result && result.id && payload.id !== result.id) {\n      return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n    }\n\n    if (err) {\n      return callback(err);\n    }\n\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n\n    callback(null, result.result);\n  };\n};\n\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":{"version":3,"sources":["F:/7color/node_modules/web3-core-requestmanager/lib/index.js"],"names":["callbackify","require","_","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","net","providers","setProvider","subscriptions","Map","WebsocketProvider","HttpProvider","IpcProvider","prototype","_this","test","connect","Error","connected","clearSubscriptions","on","data","result","deprecatedResult","method","params","subscription","has","get","callback","forEach","resubscribe","error","close","event","_isCleanCloseEvent","_isIpcCloseError","ConnectionCloseError","delete","id","emit","send","InvalidProvider","jsonrpcPayload","toPayload","jsonrpcResultCallback","_jsonrpcResultCallback","request","callbackRequest","requestArgs","sendAsync","sendBatch","payload","toBatchPayload","err","results","isArray","InvalidResponse","addSubscription","set","constructor","name","removeSubscription","type","options","keepIsSyncing","size","value","reset","e","includes","code","wasClean","JSON","stringify","ErrorResponse","isValidResponse","module","exports","Manager"],"mappings":"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","sourcesContent":["/*\r\n    This file is part of web3.js.\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\r\n\"use strict\";\r\nconst { callbackify } = require('util');\r\nvar _ = require('underscore');\r\nvar errors = require('web3-core-helpers').errors;\r\nvar Jsonrpc = require('./jsonrpc.js');\r\nvar BatchManager = require('./batch.js');\r\nvar givenProvider = require('./givenProvider.js');\r\n/**\r\n * It's responsible for passing messages to providers\r\n * It's also responsible for polling the ethereum node for incoming messages\r\n * Default poll timeout is 1 second\r\n * Singleton\r\n *\r\n * @param {string|Object}provider\r\n * @param {Net.Socket} net\r\n *\r\n * @constructor\r\n */\r\nvar RequestManager = function RequestManager(provider, net) {\r\n    this.provider = null;\r\n    this.providers = RequestManager.providers;\r\n    this.setProvider(provider, net);\r\n    this.subscriptions = new Map();\r\n};\r\nRequestManager.givenProvider = givenProvider;\r\nRequestManager.providers = {\r\n    WebsocketProvider: require('web3-providers-ws'),\r\n    HttpProvider: require('web3-providers-http'),\r\n    IpcProvider: require('web3-providers-ipc')\r\n};\r\n/**\r\n * Should be used to set provider of request manager\r\n *\r\n * @method setProvider\r\n *\r\n * @param {Object} provider\r\n * @param {net.Socket} net\r\n *\r\n * @returns void\r\n */\r\nRequestManager.prototype.setProvider = function (provider, net) {\r\n    var _this = this;\r\n    // autodetect provider\r\n    if (provider && typeof provider === 'string' && this.providers) {\r\n        // HTTP\r\n        if (/^http(s)?:\\/\\//i.test(provider)) {\r\n            provider = new this.providers.HttpProvider(provider);\r\n            // WS\r\n        }\r\n        else if (/^ws(s)?:\\/\\//i.test(provider)) {\r\n            provider = new this.providers.WebsocketProvider(provider);\r\n            // IPC\r\n        }\r\n        else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\r\n            provider = new this.providers.IpcProvider(provider, net);\r\n        }\r\n        else if (provider) {\r\n            throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\r\n        }\r\n    }\r\n    // reset the old one before changing, if still connected\r\n    if (this.provider && this.provider.connected)\r\n        this.clearSubscriptions();\r\n    this.provider = provider || null;\r\n    // listen to incoming notifications\r\n    if (this.provider && this.provider.on) {\r\n        this.provider.on('data', function data(result, deprecatedResult) {\r\n            result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\r\n            // if result is a subscription, call callback for that subscription\r\n            if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {\r\n                _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\r\n            }\r\n        });\r\n        // resubscribe if the provider has reconnected\r\n        this.provider.on('connect', function connect() {\r\n            _this.subscriptions.forEach(function (subscription) {\r\n                subscription.subscription.resubscribe();\r\n            });\r\n        });\r\n        // notify all subscriptions about the error condition\r\n        this.provider.on('error', function error(error) {\r\n            _this.subscriptions.forEach(function (subscription) {\r\n                subscription.callback(error);\r\n            });\r\n        });\r\n        // notify all subscriptions about bad close conditions\r\n        this.provider.on('close', function close(event) {\r\n            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\r\n                _this.subscriptions.forEach(function (subscription) {\r\n                    subscription.callback(errors.ConnectionCloseError(event));\r\n                    _this.subscriptions.delete(subscription.subscription.id);\r\n                });\r\n                if (_this.provider && _this.provider.emit) {\r\n                    _this.provider.emit('error', errors.ConnectionCloseError(event));\r\n                }\r\n            }\r\n            if (_this.provider && _this.provider.emit) {\r\n                _this.provider.emit('end', event);\r\n            }\r\n        });\r\n        // TODO add end, timeout??\r\n    }\r\n};\r\n/**\r\n * Asynchronously send request to provider.\r\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\r\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\r\n * @method send\r\n * @param {Object} data\r\n * @param {Function} callback\r\n */\r\nRequestManager.prototype.send = function (data, callback) {\r\n    callback = callback || function () { };\r\n    if (!this.provider) {\r\n        return callback(errors.InvalidProvider());\r\n    }\r\n    const { method, params } = data;\r\n    const jsonrpcPayload = Jsonrpc.toPayload(method, params);\r\n    const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);\r\n    if (this.provider.request) {\r\n        const callbackRequest = callbackify(this.provider.request);\r\n        const requestArgs = { method, params };\r\n        callbackRequest(requestArgs, callback);\r\n    }\r\n    else if (this.provider.sendAsync) {\r\n        this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);\r\n    }\r\n    else if (this.provider.send) {\r\n        this.provider.send(jsonrpcPayload, jsonrpcResultCallback);\r\n    }\r\n    else {\r\n        throw new Error('Provider does not have a request or send method to use.');\r\n    }\r\n};\r\n/**\r\n * Asynchronously send batch request.\r\n * Only works if provider supports batch methods through `sendAsync` or `send`.\r\n * @method sendBatch\r\n * @param {Array} data - array of payload objects\r\n * @param {Function} callback\r\n */\r\nRequestManager.prototype.sendBatch = function (data, callback) {\r\n    if (!this.provider) {\r\n        return callback(errors.InvalidProvider());\r\n    }\r\n    var payload = Jsonrpc.toBatchPayload(data);\r\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        if (!_.isArray(results)) {\r\n            return callback(errors.InvalidResponse(results));\r\n        }\r\n        callback(null, results);\r\n    });\r\n};\r\n/**\r\n * Waits for notifications\r\n *\r\n * @method addSubscription\r\n * @param {Subscription} subscription         the subscription\r\n * @param {String} type         the subscription namespace (eth, personal, etc)\r\n * @param {Function} callback   the callback to call for incoming notifications\r\n */\r\nRequestManager.prototype.addSubscription = function (subscription, callback) {\r\n    if (this.provider.on) {\r\n        this.subscriptions.set(subscription.id, {\r\n            callback: callback,\r\n            subscription: subscription\r\n        });\r\n    }\r\n    else {\r\n        throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\r\n    }\r\n};\r\n/**\r\n * Waits for notifications\r\n *\r\n * @method removeSubscription\r\n * @param {String} id           the subscription id\r\n * @param {Function} callback   fired once the subscription is removed\r\n */\r\nRequestManager.prototype.removeSubscription = function (id, callback) {\r\n    if (this.subscriptions.has(id)) {\r\n        var type = this.subscriptions.get(id).subscription.options.type;\r\n        // remove subscription first to avoid reentry\r\n        this.subscriptions.delete(id);\r\n        // then, try to actually unsubscribe\r\n        this.send({\r\n            method: type + '_unsubscribe',\r\n            params: [id]\r\n        }, callback);\r\n        return;\r\n    }\r\n    if (typeof callback === 'function') {\r\n        // call the callback if the subscription was already removed\r\n        callback(null);\r\n    }\r\n};\r\n/**\r\n * Should be called to reset the subscriptions\r\n *\r\n * @method reset\r\n *\r\n * @returns {boolean}\r\n */\r\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\r\n    try {\r\n        var _this = this;\r\n        // uninstall all subscriptions\r\n        if (this.subscriptions.size > 0) {\r\n            this.subscriptions.forEach(function (value, id) {\r\n                if (!keepIsSyncing || value.name !== 'syncing')\r\n                    _this.removeSubscription(id);\r\n            });\r\n        }\r\n        //  reset notification callbacks etc.\r\n        if (this.provider.reset)\r\n            this.provider.reset();\r\n        return true;\r\n    }\r\n    catch (e) {\r\n        throw new Error(`Error while clearing subscriptions: ${e}`);\r\n    }\r\n};\r\n/**\r\n * Evaluates WS close event\r\n *\r\n * @method _isCleanClose\r\n *\r\n * @param {CloseEvent | boolean} event WS close event or exception flag\r\n *\r\n * @returns {boolean}\r\n */\r\nRequestManager.prototype._isCleanCloseEvent = function (event) {\r\n    return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\r\n};\r\n/**\r\n * Detects Ipc close error. The node.net module emits ('close', isException)\r\n *\r\n * @method _isIpcCloseError\r\n *\r\n * @param {CloseEvent | boolean} event WS close event or exception flag\r\n *\r\n * @returns {boolean}\r\n */\r\nRequestManager.prototype._isIpcCloseError = function (event) {\r\n    return typeof event === 'boolean' && event;\r\n};\r\n/**\r\n * The jsonrpc result callback for RequestManager.send\r\n *\r\n * @method _jsonrpcResultCallback\r\n *\r\n * @param {Function} callback the callback to use\r\n * @param {Object} payload the jsonrpc payload\r\n *\r\n * @returns {Function} return callback of form (err, result)\r\n *\r\n */\r\nRequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {\r\n    return function (err, result) {\r\n        if (result && result.id && payload.id !== result.id) {\r\n            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\r\n        }\r\n        if (err) {\r\n            return callback(err);\r\n        }\r\n        if (result && result.error) {\r\n            return callback(errors.ErrorResponse(result));\r\n        }\r\n        if (!Jsonrpc.isValidResponse(result)) {\r\n            return callback(errors.InvalidResponse(result));\r\n        }\r\n        callback(null, result.result);\r\n    };\r\n};\r\nmodule.exports = {\r\n    Manager: RequestManager,\r\n    BatchManager: BatchManager\r\n};\r\n"]},"metadata":{},"sourceType":"script"}